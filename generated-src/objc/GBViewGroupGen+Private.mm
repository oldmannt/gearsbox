// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

#import "GBViewGroupGen+Private.h"
#import "GBViewGroupGen.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GBViewGen+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class ViewGroupGen::ObjcProxy final
: public ::gearsbox::ViewGroupGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    std::shared_ptr<::gearsbox::ViewGen> getView(const std::string & c_id) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getView:(::djinni::String::fromCpp(c_id))];
            return ::djinni_generated::ViewGen::toCpp(r);
        }
    }
    bool addView(const std::shared_ptr<::gearsbox::ViewGen> & c_view) override
    {
        @autoreleasepool {
            auto r = [Handle::get() addView:(::djinni_generated::ViewGen::fromCpp(c_view))];
            return ::djinni::Bool::toCpp(r);
        }
    }
    bool removeView(const std::shared_ptr<::gearsbox::ViewGen> & c_view) override
    {
        @autoreleasepool {
            auto r = [Handle::get() removeView:(::djinni_generated::ViewGen::fromCpp(c_view))];
            return ::djinni::Bool::toCpp(r);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ViewGroupGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ViewGroupGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
