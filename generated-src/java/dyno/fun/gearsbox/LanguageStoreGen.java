// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class LanguageStoreGen {
    public abstract boolean initialize(String param);

    public abstract void setLanguage(LangType lang);

    public abstract LangType getLanguage();

    public abstract String getString(String type);

    public static native LanguageStoreGen instance();

    private static final class CppProxy extends LanguageStoreGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String param)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, param);
        }
        private native boolean native_initialize(long _nativeRef, String param);

        @Override
        public void setLanguage(LangType lang)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLanguage(this.nativeRef, lang);
        }
        private native void native_setLanguage(long _nativeRef, LangType lang);

        @Override
        public LangType getLanguage()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLanguage(this.nativeRef);
        }
        private native LangType native_getLanguage(long _nativeRef);

        @Override
        public String getString(String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, type);
        }
        private native String native_getString(long _nativeRef, String type);
    }
}
