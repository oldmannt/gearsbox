// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBLanguageStoreGen+Private.h"
#import "GBLanguageStoreGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBLanguageStoreGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBLanguageStoreGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::LanguageStoreGen>&)cppRef;

@end

@implementation GBLanguageStoreGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::LanguageStoreGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::LanguageStoreGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBLanguageStoreGen *)instance {
    try {
        auto r = ::gearsbox::LanguageStoreGen::instance();
        return ::djinni_generated::LanguageStoreGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)initialize:(nonnull NSString *)param {
    try {
        auto r = _cppRefHandle.get()->initialize(::djinni::String::toCpp(param));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLanguage:(GBLangType)lang {
    try {
        _cppRefHandle.get()->setLanguage(::djinni::Enum<::gearsbox::LangType, GBLangType>::toCpp(lang));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (GBLangType)getLanguage {
    try {
        auto r = _cppRefHandle.get()->getLanguage();
        return ::djinni::Enum<::gearsbox::LangType, GBLangType>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getString:(nonnull NSString *)type {
    try {
        auto r = _cppRefHandle.get()->getString(::djinni::String::toCpp(type));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto LanguageStoreGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto LanguageStoreGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBLanguageStoreGen>(cpp);
}

}  // namespace djinni_generated

@end
