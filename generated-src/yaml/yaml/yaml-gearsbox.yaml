# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from camera.djinni, config.djinni, gearsbox.djinni, ui.djinni
---
name: gb_argb_color
typedef: 'record'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ArgbColor'
  header: '"argb_color.hpp"'
  byValue: false
objc:
  typename: 'GBArgbColor'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBArgbColor'
  header: '"GBArgbColor.h"'
objcpp:
  translator: '::djinni_generated::ArgbColor'
  header: '"GBArgbColor+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ArgbColor'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ArgbColor'
jni:
  translator: '::djinni_generated::NativeArgbColor'
  header: '"NativeArgbColor.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ArgbColor;'
---
name: gb_async_loop_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::AsyncLoopGen'
  header: '"async_loop_gen.hpp"'
  byValue: false
objc:
  typename: 'GBAsyncLoopGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBAsyncLoopGen'
  header: '"GBAsyncLoopGen.h"'
objcpp:
  translator: '::djinni_generated::AsyncLoopGen'
  header: '"GBAsyncLoopGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.AsyncLoopGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.AsyncLoopGen'
jni:
  translator: '::djinni_generated::NativeAsyncLoopGen'
  header: '"NativeAsyncLoopGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/AsyncLoopGen;'
---
name: gb_breakpad_gen
typedef: 'interface +c +o'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::BreakpadGen'
  header: '"breakpad_gen.hpp"'
  byValue: false
objc:
  typename: 'GBBreakpadGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBBreakpadGen'
  header: '"GBBreakpadGen.h"'
objcpp:
  translator: '::djinni_generated::BreakpadGen'
  header: '"GBBreakpadGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.BreakpadGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.BreakpadGen'
jni:
  translator: '::djinni_generated::NativeBreakpadGen'
  header: '"NativeBreakpadGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/BreakpadGen;'
---
name: gb_callback_http_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CallbackHttpGen'
  header: '"callback_http_gen.hpp"'
  byValue: false
objc:
  typename: 'GBCallbackHttpGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBCallbackHttpGen'
  header: '"GBCallbackHttpGen.h"'
objcpp:
  translator: '::djinni_generated::CallbackHttpGen'
  header: '"GBCallbackHttpGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CallbackHttpGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CallbackHttpGen'
jni:
  translator: '::djinni_generated::NativeCallbackHttpGen'
  header: '"NativeCallbackHttpGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CallbackHttpGen;'
---
name: gb_camera_capture_handler
typedef: 'interface +c +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraCaptureHandler'
  header: '"camera_capture_handler.hpp"'
  byValue: false
objc:
  typename: 'GBCameraCaptureHandler'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBCameraCaptureHandler'
  header: '"GBCameraCaptureHandler.h"'
objcpp:
  translator: '::djinni_generated::CameraCaptureHandler'
  header: '"GBCameraCaptureHandler+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraCaptureHandler'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraCaptureHandler'
jni:
  translator: '::djinni_generated::NativeCameraCaptureHandler'
  header: '"NativeCameraCaptureHandler.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraCaptureHandler;'
---
name: gb_camera_config_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraConfigGen'
  header: '"camera_config_gen.hpp"'
  byValue: false
objc:
  typename: 'GBCameraConfigGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBCameraConfigGen'
  header: '"GBCameraConfigGen.h"'
objcpp:
  translator: '::djinni_generated::CameraConfigGen'
  header: '"GBCameraConfigGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraConfigGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraConfigGen'
jni:
  translator: '::djinni_generated::NativeCameraConfigGen'
  header: '"NativeCameraConfigGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraConfigGen;'
---
name: gb_camera_controller_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraControllerGen'
  header: '"camera_controller_gen.hpp"'
  byValue: false
objc:
  typename: 'GBCameraControllerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBCameraControllerGen'
  header: '"GBCameraControllerGen.h"'
objcpp:
  translator: '::djinni_generated::CameraControllerGen'
  header: '"GBCameraControllerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraControllerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraControllerGen'
jni:
  translator: '::djinni_generated::NativeCameraControllerGen'
  header: '"NativeCameraControllerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraControllerGen;'
---
name: gb_camera_exposure_mode
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraExposureMode'
  header: '"camera_exposure_mode.hpp"'
  byValue: true
objc:
  typename: 'GBCameraExposureMode'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBCameraExposureMode.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::CameraExposureMode, GBCameraExposureMode>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraExposureMode'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraExposureMode'
jni:
  translator: '::djinni_generated::NativeCameraExposureMode'
  header: '"NativeCameraExposureMode.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraExposureMode;'
---
name: gb_camera_flash
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraFlash'
  header: '"camera_flash.hpp"'
  byValue: true
objc:
  typename: 'GBCameraFlash'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBCameraFlash.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::CameraFlash, GBCameraFlash>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraFlash'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraFlash'
jni:
  translator: '::djinni_generated::NativeCameraFlash'
  header: '"NativeCameraFlash.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraFlash;'
---
name: gb_camera_focus_mode
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraFocusMode'
  header: '"camera_focus_mode.hpp"'
  byValue: true
objc:
  typename: 'GBCameraFocusMode'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBCameraFocusMode.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::CameraFocusMode, GBCameraFocusMode>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraFocusMode'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraFocusMode'
jni:
  translator: '::djinni_generated::NativeCameraFocusMode'
  header: '"NativeCameraFocusMode.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraFocusMode;'
---
name: gb_camera_focus_range
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraFocusRange'
  header: '"camera_focus_range.hpp"'
  byValue: true
objc:
  typename: 'GBCameraFocusRange'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBCameraFocusRange.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::CameraFocusRange, GBCameraFocusRange>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraFocusRange'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraFocusRange'
jni:
  translator: '::djinni_generated::NativeCameraFocusRange'
  header: '"NativeCameraFocusRange.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraFocusRange;'
---
name: gb_camera_quality
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CameraQuality'
  header: '"camera_quality.hpp"'
  byValue: true
objc:
  typename: 'GBCameraQuality'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBCameraQuality.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::CameraQuality, GBCameraQuality>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CameraQuality'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CameraQuality'
jni:
  translator: '::djinni_generated::NativeCameraQuality'
  header: '"NativeCameraQuality.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CameraQuality;'
---
name: gb_config_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ConfigGen'
  header: '"config_gen.hpp"'
  byValue: false
objc:
  typename: 'GBConfigGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBConfigGen'
  header: '"GBConfigGen.h"'
objcpp:
  translator: '::djinni_generated::ConfigGen'
  header: '"GBConfigGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ConfigGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ConfigGen'
jni:
  translator: '::djinni_generated::NativeConfigGen'
  header: '"NativeConfigGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ConfigGen;'
---
name: gb_constraint_type
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ConstraintType'
  header: '"constraint_type.hpp"'
  byValue: true
objc:
  typename: 'GBConstraintType'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBConstraintType.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::ConstraintType, GBConstraintType>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ConstraintType'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ConstraintType'
jni:
  translator: '::djinni_generated::NativeConstraintType'
  header: '"NativeConstraintType.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ConstraintType;'
---
name: gb_crash_handler_gen
typedef: 'interface +c +o'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::CrashHandlerGen'
  header: '"crash_handler_gen.hpp"'
  byValue: false
objc:
  typename: 'GBCrashHandlerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBCrashHandlerGen'
  header: '"GBCrashHandlerGen.h"'
objcpp:
  translator: '::djinni_generated::CrashHandlerGen'
  header: '"GBCrashHandlerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.CrashHandlerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.CrashHandlerGen'
jni:
  translator: '::djinni_generated::NativeCrashHandlerGen'
  header: '"NativeCrashHandlerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/CrashHandlerGen;'
---
name: gb_file_info_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::FileInfoGen'
  header: '"file_info_gen.hpp"'
  byValue: false
objc:
  typename: 'GBFileInfoGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBFileInfoGen'
  header: '"GBFileInfoGen.h"'
objcpp:
  translator: '::djinni_generated::FileInfoGen'
  header: '"GBFileInfoGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.FileInfoGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.FileInfoGen'
jni:
  translator: '::djinni_generated::NativeFileInfoGen'
  header: '"NativeFileInfoGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/FileInfoGen;'
---
name: gb_http_request_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::HttpRequestGen'
  header: '"http_request_gen.hpp"'
  byValue: false
objc:
  typename: 'GBHttpRequestGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBHttpRequestGen'
  header: '"GBHttpRequestGen.h"'
objcpp:
  translator: '::djinni_generated::HttpRequestGen'
  header: '"GBHttpRequestGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.HttpRequestGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.HttpRequestGen'
jni:
  translator: '::djinni_generated::NativeHttpRequestGen'
  header: '"NativeHttpRequestGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/HttpRequestGen;'
---
name: gb_instance_getter_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::InstanceGetterGen'
  header: '"instance_getter_gen.hpp"'
  byValue: false
objc:
  typename: 'GBInstanceGetterGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBInstanceGetterGen'
  header: '"GBInstanceGetterGen.h"'
objcpp:
  translator: '::djinni_generated::InstanceGetterGen'
  header: '"GBInstanceGetterGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.InstanceGetterGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.InstanceGetterGen'
jni:
  translator: '::djinni_generated::NativeInstanceGetterGen'
  header: '"NativeInstanceGetterGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/InstanceGetterGen;'
---
name: gb_lang_type
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::LangType'
  header: '"lang_type.hpp"'
  byValue: true
objc:
  typename: 'GBLangType'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBLangType.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::LangType, GBLangType>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.LangType'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.LangType'
jni:
  translator: '::djinni_generated::NativeLangType'
  header: '"NativeLangType.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/LangType;'
---
name: gb_language_store_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::LanguageStoreGen'
  header: '"language_store_gen.hpp"'
  byValue: false
objc:
  typename: 'GBLanguageStoreGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBLanguageStoreGen'
  header: '"GBLanguageStoreGen.h"'
objcpp:
  translator: '::djinni_generated::LanguageStoreGen'
  header: '"GBLanguageStoreGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.LanguageStoreGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.LanguageStoreGen'
jni:
  translator: '::djinni_generated::NativeLanguageStoreGen'
  header: '"NativeLanguageStoreGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/LanguageStoreGen;'
---
name: gb_log_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::LogGen'
  header: '"log_gen.hpp"'
  byValue: false
objc:
  typename: 'GBLogGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBLogGen'
  header: '"GBLogGen.h"'
objcpp:
  translator: '::djinni_generated::LogGen'
  header: '"GBLogGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.LogGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.LogGen'
jni:
  translator: '::djinni_generated::NativeLogGen'
  header: '"NativeLogGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/LogGen;'
---
name: gb_platform_utility_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::PlatformUtilityGen'
  header: '"platform_utility_gen.hpp"'
  byValue: false
objc:
  typename: 'GBPlatformUtilityGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBPlatformUtilityGen'
  header: '"GBPlatformUtilityGen.h"'
objcpp:
  translator: '::djinni_generated::PlatformUtilityGen'
  header: '"GBPlatformUtilityGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.PlatformUtilityGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.PlatformUtilityGen'
jni:
  translator: '::djinni_generated::NativePlatformUtilityGen'
  header: '"NativePlatformUtilityGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/PlatformUtilityGen;'
---
name: gb_task_excuser_gen
typedef: 'interface +c +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TaskExcuserGen'
  header: '"task_excuser_gen.hpp"'
  byValue: false
objc:
  typename: 'GBTaskExcuserGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBTaskExcuserGen'
  header: '"GBTaskExcuserGen.h"'
objcpp:
  translator: '::djinni_generated::TaskExcuserGen'
  header: '"GBTaskExcuserGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TaskExcuserGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TaskExcuserGen'
jni:
  translator: '::djinni_generated::NativeTaskExcuserGen'
  header: '"NativeTaskExcuserGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TaskExcuserGen;'
---
name: gb_task_info_gen
typedef: 'interface +c +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TaskInfoGen'
  header: '"task_info_gen.hpp"'
  byValue: false
objc:
  typename: 'GBTaskInfoGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBTaskInfoGen'
  header: '"GBTaskInfoGen.h"'
objcpp:
  translator: '::djinni_generated::TaskInfoGen'
  header: '"GBTaskInfoGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TaskInfoGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TaskInfoGen'
jni:
  translator: '::djinni_generated::NativeTaskInfoGen'
  header: '"NativeTaskInfoGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TaskInfoGen;'
---
name: gb_task_manager_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TaskManagerGen'
  header: '"task_manager_gen.hpp"'
  byValue: false
objc:
  typename: 'GBTaskManagerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBTaskManagerGen'
  header: '"GBTaskManagerGen.h"'
objcpp:
  translator: '::djinni_generated::TaskManagerGen'
  header: '"GBTaskManagerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TaskManagerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TaskManagerGen'
jni:
  translator: '::djinni_generated::NativeTaskManagerGen'
  header: '"NativeTaskManagerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TaskManagerGen;'
---
name: gb_text_align
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TextAlign'
  header: '"text_align.hpp"'
  byValue: true
objc:
  typename: 'GBTextAlign'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBTextAlign.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::TextAlign, GBTextAlign>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TextAlign'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TextAlign'
jni:
  translator: '::djinni_generated::NativeTextAlign'
  header: '"NativeTextAlign.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TextAlign;'
---
name: gb_text_boarder
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TextBoarder'
  header: '"text_boarder.hpp"'
  byValue: true
objc:
  typename: 'GBTextBoarder'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBTextBoarder.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::TextBoarder, GBTextBoarder>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TextBoarder'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TextBoarder'
jni:
  translator: '::djinni_generated::NativeTextBoarder'
  header: '"NativeTextBoarder.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TextBoarder;'
---
name: gb_text_keyboard
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TextKeyboard'
  header: '"text_keyboard.hpp"'
  byValue: true
objc:
  typename: 'GBTextKeyboard'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBTextKeyboard.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::TextKeyboard, GBTextKeyboard>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TextKeyboard'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TextKeyboard'
jni:
  translator: '::djinni_generated::NativeTextKeyboard'
  header: '"NativeTextKeyboard.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TextKeyboard;'
---
name: gb_timer_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TimerGen'
  header: '"timer_gen.hpp"'
  byValue: false
objc:
  typename: 'GBTimerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBTimerGen'
  header: '"GBTimerGen.h"'
objcpp:
  translator: '::djinni_generated::TimerGen'
  header: '"GBTimerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TimerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TimerGen'
jni:
  translator: '::djinni_generated::NativeTimerGen'
  header: '"NativeTimerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TimerGen;'
---
name: gb_typer_convertor_dummy
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::TyperConvertorDummy'
  header: '"typer_convertor_dummy.hpp"'
  byValue: false
objc:
  typename: 'GBTyperConvertorDummy'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBTyperConvertorDummy'
  header: '"GBTyperConvertorDummy.h"'
objcpp:
  translator: '::djinni_generated::TyperConvertorDummy'
  header: '"GBTyperConvertorDummy+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.TyperConvertorDummy'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.TyperConvertorDummy'
jni:
  translator: '::djinni_generated::NativeTyperConvertorDummy'
  header: '"NativeTyperConvertorDummy.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/TyperConvertorDummy;'
---
name: gb_ui_conf_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::UiConfGen'
  header: '"ui_conf_gen.hpp"'
  byValue: false
objc:
  typename: 'GBUiConfGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBUiConfGen'
  header: '"GBUiConfGen.h"'
objcpp:
  translator: '::djinni_generated::UiConfGen'
  header: '"GBUiConfGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.UiConfGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.UiConfGen'
jni:
  translator: '::djinni_generated::NativeUiConfGen'
  header: '"NativeUiConfGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/UiConfGen;'
---
name: gb_ui_manager_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::UiManagerGen'
  header: '"ui_manager_gen.hpp"'
  byValue: false
objc:
  typename: 'GBUiManagerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBUiManagerGen'
  header: '"GBUiManagerGen.h"'
objcpp:
  translator: '::djinni_generated::UiManagerGen'
  header: '"GBUiManagerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.UiManagerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.UiManagerGen'
jni:
  translator: '::djinni_generated::NativeUiManagerGen'
  header: '"NativeUiManagerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/UiManagerGen;'
---
name: gb_ui_value_checker_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::UiValueCheckerGen'
  header: '"ui_value_checker_gen.hpp"'
  byValue: false
objc:
  typename: 'GBUiValueCheckerGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBUiValueCheckerGen'
  header: '"GBUiValueCheckerGen.h"'
objcpp:
  translator: '::djinni_generated::UiValueCheckerGen'
  header: '"GBUiValueCheckerGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.UiValueCheckerGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.UiValueCheckerGen'
jni:
  translator: '::djinni_generated::NativeUiValueCheckerGen'
  header: '"NativeUiValueCheckerGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/UiValueCheckerGen;'
---
name: gb_video_encoder_gen
typedef: 'interface +c +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::VideoEncoderGen'
  header: '"video_encoder_gen.hpp"'
  byValue: false
objc:
  typename: 'GBVideoEncoderGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBVideoEncoderGen'
  header: '"GBVideoEncoderGen.h"'
objcpp:
  translator: '::djinni_generated::VideoEncoderGen'
  header: '"GBVideoEncoderGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.VideoEncoderGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.VideoEncoderGen'
jni:
  translator: '::djinni_generated::NativeVideoEncoderGen'
  header: '"NativeVideoEncoderGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/VideoEncoderGen;'
---
name: gb_video_frame_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::VideoFrameGen'
  header: '"video_frame_gen.hpp"'
  byValue: false
objc:
  typename: 'GBVideoFrameGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBVideoFrameGen'
  header: '"GBVideoFrameGen.h"'
objcpp:
  translator: '::djinni_generated::VideoFrameGen'
  header: '"GBVideoFrameGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.VideoFrameGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.VideoFrameGen'
jni:
  translator: '::djinni_generated::NativeVideoFrameGen'
  header: '"NativeVideoFrameGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/VideoFrameGen;'
---
name: gb_video_info_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::VideoInfoGen'
  header: '"video_info_gen.hpp"'
  byValue: false
objc:
  typename: 'GBVideoInfoGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBVideoInfoGen'
  header: '"GBVideoInfoGen.h"'
objcpp:
  translator: '::djinni_generated::VideoInfoGen'
  header: '"GBVideoInfoGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.VideoInfoGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.VideoInfoGen'
jni:
  translator: '::djinni_generated::NativeVideoInfoGen'
  header: '"NativeVideoInfoGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/VideoInfoGen;'
---
name: gb_video_writer_gen
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::VideoWriterGen'
  header: '"video_writer_gen.hpp"'
  byValue: false
objc:
  typename: 'GBVideoWriterGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBVideoWriterGen'
  header: '"GBVideoWriterGen.h"'
objcpp:
  translator: '::djinni_generated::VideoWriterGen'
  header: '"GBVideoWriterGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.VideoWriterGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.VideoWriterGen'
jni:
  translator: '::djinni_generated::NativeVideoWriterGen'
  header: '"NativeVideoWriterGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/VideoWriterGen;'
---
name: gb_view_conf
typedef: 'record +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewConf'
  header: '"view_conf.hpp"'
  byValue: false
objc:
  typename: 'GBViewConf'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewConf'
  header: '"GBViewConf.h"'
objcpp:
  translator: '::djinni_generated::ViewConf'
  header: '"GBViewConf+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewConf'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewConf'
jni:
  translator: '::djinni_generated::NativeViewConf'
  header: '"NativeViewConf.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewConf;'
---
name: gb_view_constraint
typedef: 'record +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewConstraint'
  header: '"view_constraint.hpp"'
  byValue: false
objc:
  typename: 'GBViewConstraint'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewConstraint'
  header: '"GBViewConstraint.h"'
objcpp:
  translator: '::djinni_generated::ViewConstraint'
  header: '"GBViewConstraint+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewConstraint'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewConstraint'
jni:
  translator: '::djinni_generated::NativeViewConstraint'
  header: '"NativeViewConstraint.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewConstraint;'
---
name: gb_view_event
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewEvent'
  header: '"view_event.hpp"'
  byValue: true
objc:
  typename: 'GBViewEvent'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBViewEvent.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::ViewEvent, GBViewEvent>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewEvent'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewEvent'
jni:
  translator: '::djinni_generated::NativeViewEvent'
  header: '"NativeViewEvent.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewEvent;'
---
name: gb_view_event_handler
typedef: 'interface +c'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewEventHandler'
  header: '"view_event_handler.hpp"'
  byValue: false
objc:
  typename: 'GBViewEventHandler'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewEventHandler'
  header: '"GBViewEventHandler.h"'
objcpp:
  translator: '::djinni_generated::ViewEventHandler'
  header: '"GBViewEventHandler+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewEventHandler'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewEventHandler'
jni:
  translator: '::djinni_generated::NativeViewEventHandler'
  header: '"NativeViewEventHandler.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewEventHandler;'
---
name: gb_view_event_param
typedef: 'record'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewEventParam'
  header: '"view_event_param.hpp"'
  byValue: false
objc:
  typename: 'GBViewEventParam'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewEventParam'
  header: '"GBViewEventParam.h"'
objcpp:
  translator: '::djinni_generated::ViewEventParam'
  header: '"GBViewEventParam+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewEventParam'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewEventParam'
jni:
  translator: '::djinni_generated::NativeViewEventParam'
  header: '"NativeViewEventParam.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewEventParam;'
---
name: gb_view_factory_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewFactoryGen'
  header: '"view_factory_gen.hpp"'
  byValue: false
objc:
  typename: 'GBViewFactoryGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewFactoryGen'
  header: '"GBViewFactoryGen.h"'
objcpp:
  translator: '::djinni_generated::ViewFactoryGen'
  header: '"GBViewFactoryGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewFactoryGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewFactoryGen'
jni:
  translator: '::djinni_generated::NativeViewFactoryGen'
  header: '"NativeViewFactoryGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewFactoryGen;'
---
name: gb_view_frame
typedef: 'record'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewFrame'
  header: '"view_frame.hpp"'
  byValue: false
objc:
  typename: 'GBViewFrame'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewFrame'
  header: '"GBViewFrame.h"'
objcpp:
  translator: '::djinni_generated::ViewFrame'
  header: '"GBViewFrame+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewFrame'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewFrame'
jni:
  translator: '::djinni_generated::NativeViewFrame'
  header: '"NativeViewFrame.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewFrame;'
---
name: gb_view_gen
typedef: 'interface +o +j'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewGen'
  header: '"view_gen.hpp"'
  byValue: false
objc:
  typename: 'GBViewGen'
  pointer: true
  hash: '%s.hash'
  boxed: 'GBViewGen'
  header: '"GBViewGen.h"'
objcpp:
  translator: '::djinni_generated::ViewGen'
  header: '"GBViewGen+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewGen'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewGen'
jni:
  translator: '::djinni_generated::NativeViewGen'
  header: '"NativeViewGen.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewGen;'
---
name: gb_view_type
typedef: 'enum'
params: []
prefix: gb_
cpp:
  typename: '::gearsbox::ViewType'
  header: '"view_type.hpp"'
  byValue: true
objc:
  typename: 'GBViewType'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"GBViewType.h"'
objcpp:
  translator: '::djinni::Enum<::gearsbox::ViewType, GBViewType>'
  header: '"DJIMarshal+Private.h"'
java:
  reference: true
  typename: 'dyno.fun.gearsbox.ViewType'
  generic: true
  hash: '%s.hashCode()'
  boxed: 'dyno.fun.gearsbox.ViewType'
jni:
  translator: '::djinni_generated::NativeViewType'
  header: '"NativeViewType.hpp"'
  typename: jobject
  typeSignature: 'Ldyno/fun/gearsbox/ViewType;'
