// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#pragma once

#include "djinni_support.hpp"
#include "timer_handler_gen.hpp"

namespace djinni_generated {

class NativeTimerHandlerGen final : ::djinni::JniInterface<::gearsbox::TimerHandlerGen, NativeTimerHandlerGen> {
public:
    using CppType = std::shared_ptr<::gearsbox::TimerHandlerGen>;
    using CppOptType = std::shared_ptr<::gearsbox::TimerHandlerGen>;
    using JniType = jobject;

    using Boxed = NativeTimerHandlerGen;

    ~NativeTimerHandlerGen();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTimerHandlerGen>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTimerHandlerGen>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTimerHandlerGen();
    friend ::djinni::JniClass<NativeTimerHandlerGen>;
    friend ::djinni::JniInterface<::gearsbox::TimerHandlerGen, NativeTimerHandlerGen>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::gearsbox::TimerHandlerGen
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void handler(int64_t time_passed, int32_t repeated) override;

    private:
        friend ::djinni::JniInterface<::gearsbox::TimerHandlerGen, ::djinni_generated::NativeTimerHandlerGen>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/gearsbox/TimerHandlerGen") };
    const jmethodID method_handler { ::djinni::jniGetMethodID(clazz.get(), "handler", "(JI)V") };
};

}  // namespace djinni_generated
