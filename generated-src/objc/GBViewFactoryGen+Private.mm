// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

#import "GBViewFactoryGen+Private.h"
#import "GBViewFactoryGen.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GBViewConf+Private.h"
#import "GBViewGen+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class ViewFactoryGen::ObjcProxy final
: public ::gearsbox::ViewFactoryGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    std::shared_ptr<::gearsbox::ViewGen> createView(const ::gearsbox::ViewConf & c_conf) override
    {
        @autoreleasepool {
            auto r = [Handle::get() createView:(::djinni_generated::ViewConf::fromCpp(c_conf))];
            return ::djinni_generated::ViewGen::toCpp(r);
        }
    }
    std::shared_ptr<::gearsbox::ViewGen> createViewById(const std::string & c_id, ::gearsbox::ViewType c_type) override
    {
        @autoreleasepool {
            auto r = [Handle::get() createViewById:(::djinni::String::fromCpp(c_id))
                                              type:(::djinni::Enum<::gearsbox::ViewType, GBViewType>::fromCpp(c_type))];
            return ::djinni_generated::ViewGen::toCpp(r);
        }
    }
    bool injectView(const std::shared_ptr<::gearsbox::ViewGen> & c_view) override
    {
        @autoreleasepool {
            auto r = [Handle::get() injectView:(::djinni_generated::ViewGen::fromCpp(c_view))];
            return ::djinni::Bool::toCpp(r);
        }
    }
    void showViewController(const std::string & c_id, bool c_animated) override
    {
        @autoreleasepool {
            [Handle::get() showViewController:(::djinni::String::fromCpp(c_id))
                                     animated:(::djinni::Bool::fromCpp(c_animated))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ViewFactoryGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ViewFactoryGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
