// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#import "GBCameraCaptureHandler+Private.h"
#import "GBCameraCaptureHandler.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GBVideoFrameGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBCameraCaptureHandlerCppProxy : NSObject<GBCameraCaptureHandler>

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::CameraCaptureHandler>&)cppRef;

@end

@implementation GBCameraCaptureHandlerCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::CameraCaptureHandler>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::CameraCaptureHandler>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)captureOutput:(nullable id<GBVideoFrameGen>)picture
                error:(nonnull NSString *)error {
    try {
        _cppRefHandle.get()->captureOutput(::djinni_generated::VideoFrameGen::toCpp(picture),
                                           ::djinni::String::toCpp(error));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CameraCaptureHandler::ObjcProxy final
: public ::gearsbox::CameraCaptureHandler
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void captureOutput(const std::shared_ptr<::gearsbox::VideoFrameGen> & c_picture, const std::string & c_error) override
    {
        @autoreleasepool {
            [Handle::get() captureOutput:(::djinni_generated::VideoFrameGen::fromCpp(c_picture))
                                   error:(::djinni::String::fromCpp(c_error))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto CameraCaptureHandler::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GBCameraCaptureHandlerCppProxy class]]) {
        return ((GBCameraCaptureHandlerCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CameraCaptureHandler::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<GBCameraCaptureHandlerCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
