// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativePlatformUtilityGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeFileInfoGen.hpp"
#include "NativeLangType.hpp"
#include "NativeVideoFrameGen.hpp"

namespace djinni_generated {

NativePlatformUtilityGen::NativePlatformUtilityGen() : ::djinni::JniInterface<::gearsbox::PlatformUtilityGen, NativePlatformUtilityGen>() {}

NativePlatformUtilityGen::~NativePlatformUtilityGen() = default;

NativePlatformUtilityGen::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativePlatformUtilityGen::JavaProxy::~JavaProxy() = default;

int64_t NativePlatformUtilityGen::JavaProxy::getSystemTickNano() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getSystemTickNano);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
int64_t NativePlatformUtilityGen::JavaProxy::getSystemTickMsec() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getSystemTickMsec);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
double NativePlatformUtilityGen::JavaProxy::getSystemTickSec() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallDoubleMethod(Handle::get().get(), data.method_getSystemTickSec);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F64::toCpp(jniEnv, jret);
}
void NativePlatformUtilityGen::JavaProxy::endEniting(bool c_force) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_endEniting,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_force)));
    ::djinni::jniExceptionCheck(jniEnv);
}
::gearsbox::LangType NativePlatformUtilityGen::JavaProxy::getLanguage() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getLanguage);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeLangType::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getHomeDirectory() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getHomeDirectory);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getPackFilePath(const std::string & c_file) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getPackFilePath,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getPackFileBuffer(const std::string & c_file) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getPackFileBuffer,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getPackFileToHomePath(const std::string & c_file) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getPackFileToHomePath,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::unordered_set<std::string> NativePlatformUtilityGen::JavaProxy::getFilesFromPathBySuffix(const std::string & c_path, const std::string & c_suffix) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFilesFromPathBySuffix,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_suffix)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Set<::djinni::String>::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getSubDirInHome(const std::string & c_sub_dir) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getSubDirInHome,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_sub_dir)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativePlatformUtilityGen::JavaProxy::getFileNameFromPath(const std::string & c_path) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFileNameFromPath,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::shared_ptr<::gearsbox::FileInfoGen> NativePlatformUtilityGen::JavaProxy::getFileInfo(const std::string & c_path_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFileInfo,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeFileInfoGen::toCpp(jniEnv, jret);
}
bool NativePlatformUtilityGen::JavaProxy::fileExists(const std::string & c_path_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_fileExists,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativePlatformUtilityGen::JavaProxy::deleteFile(const std::string & c_fullpath) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_deleteFile,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_fullpath)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativePlatformUtilityGen::JavaProxy::isVideoFileCompatibleToSavedPhotosAlbum(const std::string & c_fullpath) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isVideoFileCompatibleToSavedPhotosAlbum,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_fullpath)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativePlatformUtilityGen::JavaProxy::saveVideoFileToSavedPhotosAlbum(const std::string & c_fullpath) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_saveVideoFileToSavedPhotosAlbum,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_fullpath)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void NativePlatformUtilityGen::JavaProxy::playVideo(const std::string & c_file) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_playVideo,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativePlatformUtilityGen::JavaProxy::alertDialog(const std::string & c_tittle, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_alertDialog,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_tittle)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativePlatformUtilityGen::JavaProxy::showLoadingView() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_showLoadingView);
    ::djinni::jniExceptionCheck(jniEnv);
}
std::shared_ptr<::gearsbox::VideoFrameGen> NativePlatformUtilityGen::JavaProxy::createVideoFrame() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformUtilityGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_createVideoFrame);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeVideoFrameGen::toCpp(jniEnv, jret);
}

}  // namespace djinni_generated
