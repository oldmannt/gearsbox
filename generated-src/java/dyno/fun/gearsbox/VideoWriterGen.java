// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class VideoWriterGen {
    public abstract void setFilePath(String file);

    public abstract void setFrameSize(int width, int height);

    public abstract void setResolution(int shortOne);

    public abstract void setFPS(int fps);

    public abstract void setBitRate(int rate);

    public abstract void encodeFrame(VideoFrameGen frame);

    public abstract void start(long interval);

    public abstract void pause();

    public abstract void resume();

    public abstract boolean isRunning();

    public abstract void saveNRlease();

    public static native VideoWriterGen create();

    private static final class CppProxy extends VideoWriterGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setFilePath(String file)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFilePath(this.nativeRef, file);
        }
        private native void native_setFilePath(long _nativeRef, String file);

        @Override
        public void setFrameSize(int width, int height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFrameSize(this.nativeRef, width, height);
        }
        private native void native_setFrameSize(long _nativeRef, int width, int height);

        @Override
        public void setResolution(int shortOne)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setResolution(this.nativeRef, shortOne);
        }
        private native void native_setResolution(long _nativeRef, int shortOne);

        @Override
        public void setFPS(int fps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFPS(this.nativeRef, fps);
        }
        private native void native_setFPS(long _nativeRef, int fps);

        @Override
        public void setBitRate(int rate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBitRate(this.nativeRef, rate);
        }
        private native void native_setBitRate(long _nativeRef, int rate);

        @Override
        public void encodeFrame(VideoFrameGen frame)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_encodeFrame(this.nativeRef, frame);
        }
        private native void native_encodeFrame(long _nativeRef, VideoFrameGen frame);

        @Override
        public void start(long interval)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef, interval);
        }
        private native void native_start(long _nativeRef, long interval);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);

        @Override
        public void resume()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resume(this.nativeRef);
        }
        private native void native_resume(long _nativeRef);

        @Override
        public boolean isRunning()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isRunning(this.nativeRef);
        }
        private native boolean native_isRunning(long _nativeRef);

        @Override
        public void saveNRlease()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_saveNRlease(this.nativeRef);
        }
        private native void native_saveNRlease(long _nativeRef);
    }
}
