// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativeConfigGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeConfigGen.hpp"

namespace djinni_generated {

NativeConfigGen::NativeConfigGen() : ::djinni::JniInterface<::gearsbox::ConfigGen, NativeConfigGen>("dyno/fun/gearsbox/ConfigGen$CppProxy") {}

NativeConfigGen::~NativeConfigGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::ConfigGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_ConfigGen_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gearsbox::ConfigGen::create();
        return ::djinni::release(::djinni_generated::NativeConfigGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_param)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->initialize(::djinni::String::toCpp(jniEnv, j_param));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1getString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->getString(::djinni::String::toCpp(jniEnv, j_type));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1getInt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->getInt(::djinni::String::toCpp(jniEnv, j_type));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1getFloat(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->getFloat(::djinni::String::toCpp(jniEnv, j_type));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1getI64(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->getI64(::djinni::String::toCpp(jniEnv, j_type));
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1setString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        ref->setString(::djinni::String::toCpp(jniEnv, j_type),
                       ::djinni::String::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1setInt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type, jint j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        ref->setInt(::djinni::String::toCpp(jniEnv, j_type),
                    ::djinni::I32::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1setFloat(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type, jfloat j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        ref->setFloat(::djinni::String::toCpp(jniEnv, j_type),
                      ::djinni::F32::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1setI64(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_type, jlong j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        ref->setI64(::djinni::String::toCpp(jniEnv, j_type),
                    ::djinni::I64::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_ConfigGen_00024CppProxy_native_1getSubConfig(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::ConfigGen>(nativeRef);
        auto r = ref->getSubConfig(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni_generated::NativeConfigGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
