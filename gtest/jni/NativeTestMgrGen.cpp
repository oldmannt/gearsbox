// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include "NativeTestMgrGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeTestMgrGen.hpp"

namespace djinni_generated {

NativeTestMgrGen::NativeTestMgrGen() : ::djinni::JniInterface<::gearsbox::TestMgrGen, NativeTestMgrGen>("dyno/fun/gearsbox/TestMgrGen$CppProxy") {}

NativeTestMgrGen::~NativeTestMgrGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TestMgrGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::TestMgrGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_TestMgrGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gearsbox::TestMgrGen::instance();
        return ::djinni::release(::djinni_generated::NativeTestMgrGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_gearsbox_TestMgrGen_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_selfPath)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TestMgrGen>(nativeRef);
        auto r = ref->initialize(::djinni::String::toCpp(jniEnv, j_selfPath));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_gearsbox_TestMgrGen_00024CppProxy_native_1runTests(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TestMgrGen>(nativeRef);
        auto r = ref->runTests();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
