// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativeTaskInfoGen.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeTaskInfoGen::NativeTaskInfoGen() : ::djinni::JniInterface<::gearsbox::TaskInfoGen, NativeTaskInfoGen>("dyno/fun/gearsbox/TaskInfoGen$CppProxy") {}

NativeTaskInfoGen::~NativeTaskInfoGen() = default;

NativeTaskInfoGen::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeTaskInfoGen::JavaProxy::~JavaProxy() = default;

int64_t NativeTaskInfoGen::JavaProxy::getTaskId() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getTaskId);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
int64_t NativeTaskInfoGen::JavaProxy::getDelay() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getDelay);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
int32_t NativeTaskInfoGen::JavaProxy::getRepeated() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getRepeated);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
int64_t NativeTaskInfoGen::JavaProxy::getAssignTick() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getAssignTick);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
std::string NativeTaskInfoGen::JavaProxy::getData() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getData);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativeTaskInfoGen::JavaProxy::getValue(const std::string & c_key) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getValue,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
int64_t NativeTaskInfoGen::JavaProxy::getIValue(const std::string & c_key) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getIValue,
                                       ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
double NativeTaskInfoGen::JavaProxy::getFValue(const std::string & c_key) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    auto jret = jniEnv->CallDoubleMethod(Handle::get().get(), data.method_getFValue,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F64::toCpp(jniEnv, jret);
}
void NativeTaskInfoGen::JavaProxy::setTaskId(int64_t c_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setTaskId,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setDelay(int64_t c_delay) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setDelay,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_delay)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setRepeated(int32_t c_repeated) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setRepeated,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_repeated)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setAssignTick(int64_t c_assign) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setAssignTick,
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_assign)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setData(const std::string & c_data) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setData,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_data)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setValue(const std::string & c_key, const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setValue,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setIValue(const std::string & c_key, int64_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setIValue,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeTaskInfoGen::JavaProxy::setFValue(const std::string & c_key, double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInfoGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setFValue,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::TaskInfoGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jlong JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getTaskId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getTaskId();
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getDelay(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getDelay();
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getRepeated(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getRepeated();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getAssignTick(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getAssignTick();
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getData();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getValue(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getIValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getIValue(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1getFValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        auto r = ref->getFValue(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setTaskId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_id)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setTaskId(::djinni::I64::toCpp(jniEnv, j_id));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setDelay(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_delay)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setDelay(::djinni::I64::toCpp(jniEnv, j_delay));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setRepeated(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_repeated)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setRepeated(::djinni::I32::toCpp(jniEnv, j_repeated));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setAssignTick(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_assign)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setAssignTick(::djinni::I64::toCpp(jniEnv, j_assign));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setData(::djinni::String::toCpp(jniEnv, j_data));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setValue(::djinni::String::toCpp(jniEnv, j_key),
                      ::djinni::String::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setIValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jlong j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setIValue(::djinni::String::toCpp(jniEnv, j_key),
                       ::djinni::I64::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskInfoGen_00024CppProxy_native_1setFValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jdouble j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskInfoGen>(nativeRef);
        ref->setFValue(::djinni::String::toCpp(jniEnv, j_key),
                       ::djinni::F64::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
