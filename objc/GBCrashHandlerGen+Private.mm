// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBCrashHandlerGen+Private.h"
#import "GBCrashHandlerGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBCrashHandlerGenCppProxy : NSObject<GBCrashHandlerGen>

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::CrashHandlerGen>&)cppRef;

@end

@implementation GBCrashHandlerGenCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::CrashHandlerGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::CrashHandlerGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)header:(nonnull NSString *)path
           url:(nonnull NSString *)url {
    try {
        _cppRefHandle.get()->header(::djinni::String::toCpp(path),
                                    ::djinni::String::toCpp(url));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CrashHandlerGen::ObjcProxy final
: public ::gearsbox::CrashHandlerGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void header(const std::string & c_path, const std::string & c_url) override
    {
        @autoreleasepool {
            [Handle::get() header:(::djinni::String::fromCpp(c_path))
                              url:(::djinni::String::fromCpp(c_url))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto CrashHandlerGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GBCrashHandlerGenCppProxy class]]) {
        return ((GBCrashHandlerGenCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CrashHandlerGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<GBCrashHandlerGenCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
