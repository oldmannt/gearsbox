// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#import "GBVideoWriterResultHandler+Private.h"
#import "GBVideoWriterResultHandler.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBVideoWriterResultHandlerCppProxy : NSObject<GBVideoWriterResultHandler>

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoWriterResultHandler>&)cppRef;

@end

@implementation GBVideoWriterResultHandlerCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::VideoWriterResultHandler>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoWriterResultHandler>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onComplete:(BOOL)success
              path:(nonnull NSString *)path {
    try {
        _cppRefHandle.get()->onComplete(::djinni::Bool::toCpp(success),
                                        ::djinni::String::toCpp(path));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)beforeComplete {
    try {
        _cppRefHandle.get()->beforeComplete();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onProgress:(float)percent {
    try {
        _cppRefHandle.get()->onProgress(::djinni::F32::toCpp(percent));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class VideoWriterResultHandler::ObjcProxy final
: public ::gearsbox::VideoWriterResultHandler
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void onComplete(bool c_success, const std::string & c_path) override
    {
        @autoreleasepool {
            [Handle::get() onComplete:(::djinni::Bool::fromCpp(c_success))
                                 path:(::djinni::String::fromCpp(c_path))];
        }
    }
    void beforeComplete() override
    {
        @autoreleasepool {
            [Handle::get() beforeComplete];
        }
    }
    void onProgress(float c_percent) override
    {
        @autoreleasepool {
            [Handle::get() onProgress:(::djinni::F32::fromCpp(c_percent))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto VideoWriterResultHandler::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GBVideoWriterResultHandlerCppProxy class]]) {
        return ((GBVideoWriterResultHandlerCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto VideoWriterResultHandler::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<GBVideoWriterResultHandlerCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
