// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#include "NativeCameraControllerGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeCameraFlash.hpp"
#include "NativeCameraQuality.hpp"
#include "NativeVideoFrameGen.hpp"

namespace djinni_generated {

NativeCameraControllerGen::NativeCameraControllerGen() : ::djinni::JniInterface<::gearsbox::CameraControllerGen, NativeCameraControllerGen>() {}

NativeCameraControllerGen::~NativeCameraControllerGen() = default;

NativeCameraControllerGen::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeCameraControllerGen::JavaProxy::~JavaProxy() = default;

void NativeCameraControllerGen::JavaProxy::startCamera() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_startCamera);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::stopCamera() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_stopCamera);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::setFlash(::gearsbox::CameraFlash c_mode) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setFlash,
                           ::djinni::get(::djinni_generated::NativeCameraFlash::fromCpp(jniEnv, c_mode)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::setQuality(::gearsbox::CameraQuality c_quality) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setQuality,
                           ::djinni::get(::djinni_generated::NativeCameraQuality::fromCpp(jniEnv, c_quality)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::switchFront(bool c_front) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_switchFront,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_front)));
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativeCameraControllerGen::JavaProxy::isFront() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isFront);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
::gearsbox::CameraFlash NativeCameraControllerGen::JavaProxy::getFlash() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getFlash);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeCameraFlash::toCpp(jniEnv, jret);
}
::gearsbox::CameraQuality NativeCameraControllerGen::JavaProxy::getQuality() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getQuality);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeCameraQuality::toCpp(jniEnv, jret);
}
void NativeCameraControllerGen::JavaProxy::setFousePoint(int32_t c_x, int32_t c_y) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setFousePoint,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_x)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_y)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::setExposurePoint(int32_t c_x, int32_t c_y) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setExposurePoint,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_x)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_y)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraControllerGen::JavaProxy::setZoom(float c_zoom) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setZoom,
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_zoom)));
    ::djinni::jniExceptionCheck(jniEnv);
}
float NativeCameraControllerGen::JavaProxy::getZoom() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallFloatMethod(Handle::get().get(), data.method_getZoom);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F32::toCpp(jniEnv, jret);
}
void NativeCameraControllerGen::JavaProxy::setISO(int32_t c_iso) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setISO,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_iso)));
    ::djinni::jniExceptionCheck(jniEnv);
}
int32_t NativeCameraControllerGen::JavaProxy::getISO() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getISO);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
void NativeCameraControllerGen::JavaProxy::setShutter(int32_t c_shutter) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setShutter,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_shutter)));
    ::djinni::jniExceptionCheck(jniEnv);
}
int32_t NativeCameraControllerGen::JavaProxy::getShutter() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getShutter);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
void NativeCameraControllerGen::JavaProxy::setAperture(float c_f) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setAperture,
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_f)));
    ::djinni::jniExceptionCheck(jniEnv);
}
float NativeCameraControllerGen::JavaProxy::getAperture() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallFloatMethod(Handle::get().get(), data.method_getAperture);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F32::toCpp(jniEnv, jret);
}
std::shared_ptr<::gearsbox::VideoFrameGen> NativeCameraControllerGen::JavaProxy::captureOneFrame() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraControllerGen>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_captureOneFrame);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeVideoFrameGen::toCpp(jniEnv, jret);
}

}  // namespace djinni_generated
