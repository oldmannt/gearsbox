// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBAsyncLoopGen+Private.h"
#import "GBAsyncLoopGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBAsyncLoopGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBAsyncLoopGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::AsyncLoopGen>&)cppRef;

@end

@implementation GBAsyncLoopGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::AsyncLoopGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::AsyncLoopGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBAsyncLoopGen *)instance {
    try {
        auto r = ::gearsbox::AsyncLoopGen::instance();
        return ::djinni_generated::AsyncLoopGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)process:(int64_t)elapse {
    try {
        _cppRefHandle.get()->process(::djinni::I64::toCpp(elapse));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AsyncLoopGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AsyncLoopGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBAsyncLoopGen>(cpp);
}

}  // namespace djinni_generated

@end
