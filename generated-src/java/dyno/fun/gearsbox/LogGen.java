// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class LogGen {
    public static final int LOG_CONSOLE = 1;

    public static final int LOG_FILE = 2;

    public static final int LOG_NET = 4;

    public static final int LOG_VERBOSE = 1;

    public static final int LOG_DEBUG = 2;

    public static final int LOG_INFO = 3;

    public static final int LOG_WARN = 4;

    public static final int LOG_ERROR = 5;

    public static final int LOG_FATAL = 6;

    public abstract boolean initialize(int output, String param);

    public abstract void log(int output, int lev, String msg);

    public static native LogGen instance();

    private static final class CppProxy extends LogGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(int output, String param)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, output, param);
        }
        private native boolean native_initialize(long _nativeRef, int output, String param);

        @Override
        public void log(int output, int lev, String msg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_log(this.nativeRef, output, lev, msg);
        }
        private native void native_log(long _nativeRef, int output, int lev, String msg);
    }
}
