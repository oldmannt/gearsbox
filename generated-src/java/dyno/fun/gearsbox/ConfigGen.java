// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from config.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ConfigGen {
    public abstract boolean initialize(String param);

    public abstract String getString(String type);

    public abstract int getInt(String type);

    public abstract float getFloat(String type);

    public abstract long getI64(String type);

    public abstract void setString(String type, String value);

    public abstract void setInt(String type, int value);

    public abstract void setFloat(String type, float value);

    public abstract void setI64(String type, long value);

    public abstract int getArrayCount();

    public abstract ConfigGen getArrayItem(int index);

    public abstract ConfigGen getSubConfig(String key);

    public static native ConfigGen create();

    private static final class CppProxy extends ConfigGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String param)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, param);
        }
        private native boolean native_initialize(long _nativeRef, String param);

        @Override
        public String getString(String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, type);
        }
        private native String native_getString(long _nativeRef, String type);

        @Override
        public int getInt(String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInt(this.nativeRef, type);
        }
        private native int native_getInt(long _nativeRef, String type);

        @Override
        public float getFloat(String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFloat(this.nativeRef, type);
        }
        private native float native_getFloat(long _nativeRef, String type);

        @Override
        public long getI64(String type)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getI64(this.nativeRef, type);
        }
        private native long native_getI64(long _nativeRef, String type);

        @Override
        public void setString(String type, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setString(this.nativeRef, type, value);
        }
        private native void native_setString(long _nativeRef, String type, String value);

        @Override
        public void setInt(String type, int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setInt(this.nativeRef, type, value);
        }
        private native void native_setInt(long _nativeRef, String type, int value);

        @Override
        public void setFloat(String type, float value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFloat(this.nativeRef, type, value);
        }
        private native void native_setFloat(long _nativeRef, String type, float value);

        @Override
        public void setI64(String type, long value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setI64(this.nativeRef, type, value);
        }
        private native void native_setI64(long _nativeRef, String type, long value);

        @Override
        public int getArrayCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getArrayCount(this.nativeRef);
        }
        private native int native_getArrayCount(long _nativeRef);

        @Override
        public ConfigGen getArrayItem(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getArrayItem(this.nativeRef, index);
        }
        private native ConfigGen native_getArrayItem(long _nativeRef, int index);

        @Override
        public ConfigGen getSubConfig(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSubConfig(this.nativeRef, key);
        }
        private native ConfigGen native_getSubConfig(long _nativeRef, String key);
    }
}
