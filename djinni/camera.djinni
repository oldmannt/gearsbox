
camera_flash = enum {
	On;
	Off;
	Auto;
}

camera_quality = enum {
	P288;
	P480;
	P720;
	P1080;
	P1920;
}

video_frame_gen = interface +o +j {
	getData():i64;
	getWidth():i32;
	getHeight():i32;
	getSize():i64;
	getLineSize():i32;

	setData(data:i64);
	setWidth(width:i32);
	setHeight(height:i32);
	setSize(size:i64);
	setLineSize(linesize:i32);
}

camera_controller_gen = interface +o +j {

	startCamera();
	stopCamera();
	setFlash(mode:camera_flash);
	setQuality(quality:camera_quality);
	switchFront(front:bool);
	isFront():bool;
	getFlash():camera_flash;
	getQuality():camera_quality;

	setFousePoint(x:i32, y:i32);
	setExposurePoint(x:i32, y:i32);
	setZoom(zoom:f32);
	getZoom():f32;
	setISO(iso:i32);
	getISO():i32;
	setShutter(shutter:i32);
	getShutter():i32;
	setAperture(f:f32);
	getAperture():f32;
	captureOneFrame():video_frame_gen;
}

video_writer_gen = interface +c {
	static create():video_writer_gen;

	setFilePath(file:string);
	getFilePath():string;
	setFPS(fps:i32);
	setBitRate(rate:i32);
	setVideoEncoder(encoder:video_encoder_gen);
	encodeFrame(frame:video_frame_gen);
	start(interval:i64);
	pause();
	resume();
	isRunning():bool;
	saveNRlease();
}

video_encoder_gen = interface +c +j +o {
	initialize(filepath:string, fps:i32, bitrate:i32, width:i32, height:i32):bool;
	encodeFrame(frame:video_frame_gen);
	saveNRelease();
}

video_info_gen = interface +c {
	# create at fist time, return after second time
	static getVideoInfo(path:string, out_width:i32, out_height:i32):video_info_gen;
	getName():string;
	getPath():string;
	getFPS():i32;
	getWidth():i32;
	getHeight():i32;
	getFrameAmount():i64;
	#by second
	getDuration():i64; 
	getVideoFrame():video_frame_gen;
}
