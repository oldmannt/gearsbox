view_frame = record{
	x:f32;
	y:f32;
	w:f32;
	h:f32;
}

constraint_type = enum {
	None;		
	Leading;	
	Trailing;	
	Top;		
	Bottom;		
	Width;		
	Height;		
	CenterX;	
	CenterY;	
}

view_type = enum {
	VIEW_BASE;
	VIEW_LABEL;
	VIEW_INPUT;
	VIEW_BTN;
}

view_constraint = record{
	type:constraint_type;
	type_to:constraint_type;
	view_from:string;
	view_to:string;
	multiplier:f32;
	offset:f32;
}

view_event = enum {
	EVENT_NONE;
	EVENT_TAP;
	EVENT_TEXT_CHANGED;
	EVENT_BTN;
}

view_event_param = record{
	x:f32;
	y:f32;
	type:view_event;
	text:string;
}

view_event_handler = interface +c {
	handle(param:view_event_param,view:view_gen):bool;
}

view_gen = interface +j +o {
	getId():string;
	setFrame(frame:view_frame);
	getFrame():view_frame;
	setBackgroundColor(a:f32,r:f32,g:f32,b:f32);
	setVisiable(v:bool);

	getSubView(id:string):view_gen;
	addSubView(id:string, type:view_type):bool;
	removeSubView(id:string):bool;
	removeAllSubView();
	addConstraint(constraint:view_constraint);

	setEventHandler(handler:view_event_handler);
}

view_factory_gen = interface +j +o{
	createView(id:string, type:view_type):view_gen;
}

ui_injecter_gen = interface +c{
	static instance():ui_injecter_gen;
	inject(id:string, view:view_gen);
	getView(id:string):view_gen;
	removeView(id:string);
}