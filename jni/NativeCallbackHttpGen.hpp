// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#pragma once

#include "callback_http_gen.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCallbackHttpGen final : ::djinni::JniInterface<::gearsbox::CallbackHttpGen, NativeCallbackHttpGen> {
public:
    using CppType = std::shared_ptr<::gearsbox::CallbackHttpGen>;
    using CppOptType = std::shared_ptr<::gearsbox::CallbackHttpGen>;
    using JniType = jobject;

    using Boxed = NativeCallbackHttpGen;

    ~NativeCallbackHttpGen();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCallbackHttpGen>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCallbackHttpGen>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCallbackHttpGen();
    friend ::djinni::JniClass<NativeCallbackHttpGen>;
    friend ::djinni::JniInterface<::gearsbox::CallbackHttpGen, NativeCallbackHttpGen>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::gearsbox::CallbackHttpGen
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        bool callback(int64_t id, bool result, const std::string & data) override;

    private:
        friend ::djinni::JniInterface<::gearsbox::CallbackHttpGen, ::djinni_generated::NativeCallbackHttpGen>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/gearsbox/CallbackHttpGen") };
    const jmethodID method_callback { ::djinni::jniGetMethodID(clazz.get(), "callback", "(JZLjava/lang/String;)Z") };
};

}  // namespace djinni_generated
