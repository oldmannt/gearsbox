// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBPlatformUtilityGen+Private.h"
#import "GBPlatformUtilityGen.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GBFileInfoGen+Private.h"
#import "GBVideoFrameGen+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class PlatformUtilityGen::ObjcProxy final
: public ::gearsbox::PlatformUtilityGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void endEniting(bool c_force) override
    {
        @autoreleasepool {
            [Handle::get() endEniting:(::djinni::Bool::fromCpp(c_force))];
        }
    }
    ::gearsbox::LangType getLanguage() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getLanguage];
            return ::djinni::Enum<::gearsbox::LangType, GBLangType>::toCpp(r);
        }
    }
    std::string getHomeDirectory() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getHomeDirectory];
            return ::djinni::String::toCpp(r);
        }
    }
    std::string getPackFilePath(const std::string & c_file) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getPackFilePath:(::djinni::String::fromCpp(c_file))];
            return ::djinni::String::toCpp(r);
        }
    }
    std::string getPackFileBuffer(const std::string & c_file) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getPackFileBuffer:(::djinni::String::fromCpp(c_file))];
            return ::djinni::String::toCpp(r);
        }
    }
    std::string getPackFileToHomePath(const std::string & c_file) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getPackFileToHomePath:(::djinni::String::fromCpp(c_file))];
            return ::djinni::String::toCpp(r);
        }
    }
    std::unordered_set<std::string> getFilesFromPathBySuffix(const std::string & c_path, const std::string & c_suffix) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getFilesFromPathBySuffix:(::djinni::String::fromCpp(c_path))
                                                      suffix:(::djinni::String::fromCpp(c_suffix))];
            return ::djinni::Set<::djinni::String>::toCpp(r);
        }
    }
    std::string getSubDirInHome(const std::string & c_sub_dir) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getSubDirInHome:(::djinni::String::fromCpp(c_sub_dir))];
            return ::djinni::String::toCpp(r);
        }
    }
    std::string getFileNameFromPath(const std::string & c_path) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getFileNameFromPath:(::djinni::String::fromCpp(c_path))];
            return ::djinni::String::toCpp(r);
        }
    }
    std::shared_ptr<::gearsbox::FileInfoGen> getFileInfo(const std::string & c_path_name) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getFileInfo:(::djinni::String::fromCpp(c_path_name))];
            return ::djinni_generated::FileInfoGen::toCpp(r);
        }
    }
    void playVideo(const std::string & c_file) override
    {
        @autoreleasepool {
            [Handle::get() playVideo:(::djinni::String::fromCpp(c_file))];
        }
    }
    std::shared_ptr<::gearsbox::VideoFrameGen> createVideoFrame() override
    {
        @autoreleasepool {
            auto r = [Handle::get() createVideoFrame];
            return ::djinni_generated::VideoFrameGen::toCpp(r);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto PlatformUtilityGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto PlatformUtilityGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
