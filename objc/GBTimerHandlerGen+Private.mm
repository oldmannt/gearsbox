// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBTimerHandlerGen+Private.h"
#import "GBTimerHandlerGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBTimerHandlerGenCppProxy : NSObject<GBTimerHandlerGen>

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::TimerHandlerGen>&)cppRef;

@end

@implementation GBTimerHandlerGenCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::TimerHandlerGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::TimerHandlerGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)handler:(int64_t)timePassed
       repeated:(int32_t)repeated {
    try {
        _cppRefHandle.get()->handler(::djinni::I64::toCpp(timePassed),
                                     ::djinni::I32::toCpp(repeated));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class TimerHandlerGen::ObjcProxy final
: public ::gearsbox::TimerHandlerGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void handler(int64_t c_time_passed, int32_t c_repeated) override
    {
        @autoreleasepool {
            [Handle::get() handler:(::djinni::I64::fromCpp(c_time_passed))
                          repeated:(::djinni::I32::fromCpp(c_repeated))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto TimerHandlerGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GBTimerHandlerGenCppProxy class]]) {
        return ((GBTimerHandlerGenCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TimerHandlerGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<GBTimerHandlerGenCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
