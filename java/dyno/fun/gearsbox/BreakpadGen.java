// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class BreakpadGen {
    public abstract void start();

    public abstract void stop();

    public abstract void setUploadUrl();

    public abstract void setHandler(CrashHandlerGen hander);

    private static final class CppProxy extends BreakpadGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);

        @Override
        public void setUploadUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setUploadUrl(this.nativeRef);
        }
        private native void native_setUploadUrl(long _nativeRef);

        @Override
        public void setHandler(CrashHandlerGen hander)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setHandler(this.nativeRef, hander);
        }
        private native void native_setHandler(long _nativeRef, CrashHandlerGen hander);
    }
}
