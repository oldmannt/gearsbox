// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class UiInjecterGen {
    public abstract void inject(String id, ViewGroupGen viewGroup);

    public abstract void removeViewGroup(String id);

    public abstract ViewGroupGen getViewGroup(String id);

    public static native UiInjecterGen instance();

    private static final class CppProxy extends UiInjecterGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void inject(String id, ViewGroupGen viewGroup)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_inject(this.nativeRef, id, viewGroup);
        }
        private native void native_inject(long _nativeRef, String id, ViewGroupGen viewGroup);

        @Override
        public void removeViewGroup(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeViewGroup(this.nativeRef, id);
        }
        private native void native_removeViewGroup(long _nativeRef, String id);

        @Override
        public ViewGroupGen getViewGroup(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getViewGroup(this.nativeRef, id);
        }
        private native ViewGroupGen native_getViewGroup(long _nativeRef, String id);
    }
}
