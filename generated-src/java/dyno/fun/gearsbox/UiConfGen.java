// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

package dyno.fun.gearsbox;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class UiConfGen {
    public abstract boolean initialize(String cfg);

    public abstract boolean load(String cfg);

    public abstract ArrayList<ViewConstraint> getConstraints(String name);

    public abstract ViewConf getViewConf(String nmae);

    public static native UiConfGen instance();

    private static final class CppProxy extends UiConfGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String cfg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, cfg);
        }
        private native boolean native_initialize(long _nativeRef, String cfg);

        @Override
        public boolean load(String cfg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_load(this.nativeRef, cfg);
        }
        private native boolean native_load(long _nativeRef, String cfg);

        @Override
        public ArrayList<ViewConstraint> getConstraints(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConstraints(this.nativeRef, name);
        }
        private native ArrayList<ViewConstraint> native_getConstraints(long _nativeRef, String name);

        @Override
        public ViewConf getViewConf(String nmae)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getViewConf(this.nativeRef, nmae);
        }
        private native ViewConf native_getViewConf(long _nativeRef, String nmae);
    }
}
