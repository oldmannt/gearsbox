// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#import "GBVideoWriterGen+Private.h"
#import "GBVideoWriterGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBVideoEncoderGen+Private.h"
#import "GBVideoFrameGen+Private.h"
#import "GBVideoWriterGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBVideoWriterGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoWriterGen>&)cppRef;

@end

@implementation GBVideoWriterGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::VideoWriterGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoWriterGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBVideoWriterGen *)create {
    try {
        auto r = ::gearsbox::VideoWriterGen::create();
        return ::djinni_generated::VideoWriterGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFilePath:(nonnull NSString *)file {
    try {
        _cppRefHandle.get()->setFilePath(::djinni::String::toCpp(file));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getFilePath {
    try {
        auto r = _cppRefHandle.get()->getFilePath();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFPS:(int32_t)fps {
    try {
        _cppRefHandle.get()->setFPS(::djinni::I32::toCpp(fps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBitRate:(int32_t)rate {
    try {
        _cppRefHandle.get()->setBitRate(::djinni::I32::toCpp(rate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVideoEncoder:(nullable id<GBVideoEncoderGen>)encoder {
    try {
        _cppRefHandle.get()->setVideoEncoder(::djinni_generated::VideoEncoderGen::toCpp(encoder));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)encodeFrame:(nullable id<GBVideoFrameGen>)frame {
    try {
        _cppRefHandle.get()->encodeFrame(::djinni_generated::VideoFrameGen::toCpp(frame));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)start:(int64_t)interval {
    try {
        _cppRefHandle.get()->start(::djinni::I64::toCpp(interval));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pause {
    try {
        _cppRefHandle.get()->pause();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)resume {
    try {
        _cppRefHandle.get()->resume();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isRunning {
    try {
        auto r = _cppRefHandle.get()->isRunning();
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)saveNRlease {
    try {
        _cppRefHandle.get()->saveNRlease();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VideoWriterGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VideoWriterGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBVideoWriterGen>(cpp);
}

}  // namespace djinni_generated

@end
