// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class UiManagerGen {
    public abstract boolean initialize(String param, ViewFactoryGen factory);

    public abstract void inject(ViewGen view);

    public abstract ViewGen getView(String id);

    public abstract boolean addView(ViewGen view);

    public abstract void removeView(String id);

    public static native UiManagerGen instance();

    private static final class CppProxy extends UiManagerGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String param, ViewFactoryGen factory)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, param, factory);
        }
        private native boolean native_initialize(long _nativeRef, String param, ViewFactoryGen factory);

        @Override
        public void inject(ViewGen view)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_inject(this.nativeRef, view);
        }
        private native void native_inject(long _nativeRef, ViewGen view);

        @Override
        public ViewGen getView(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getView(this.nativeRef, id);
        }
        private native ViewGen native_getView(long _nativeRef, String id);

        @Override
        public boolean addView(ViewGen view)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addView(this.nativeRef, view);
        }
        private native boolean native_addView(long _nativeRef, ViewGen view);

        @Override
        public void removeView(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeView(this.nativeRef, id);
        }
        private native void native_removeView(long _nativeRef, String id);
    }
}
