// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from config.djinni

#import "GBConfigGen+Private.h"
#import "GBConfigGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBConfigGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBConfigGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::ConfigGen>&)cppRef;

@end

@implementation GBConfigGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::ConfigGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::ConfigGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBConfigGen *)create {
    try {
        auto r = ::gearsbox::ConfigGen::create();
        return ::djinni_generated::ConfigGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)initialize:(nonnull NSString *)param {
    try {
        auto r = _cppRefHandle.get()->initialize(::djinni::String::toCpp(param));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getString:(nonnull NSString *)type {
    try {
        auto r = _cppRefHandle.get()->getString(::djinni::String::toCpp(type));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getInt:(nonnull NSString *)type {
    try {
        auto r = _cppRefHandle.get()->getInt(::djinni::String::toCpp(type));
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getFloat:(nonnull NSString *)type {
    try {
        auto r = _cppRefHandle.get()->getFloat(::djinni::String::toCpp(type));
        return ::djinni::F32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getI64:(nonnull NSString *)type {
    try {
        auto r = _cppRefHandle.get()->getI64(::djinni::String::toCpp(type));
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setString:(nonnull NSString *)type
            value:(nonnull NSString *)value {
    try {
        _cppRefHandle.get()->setString(::djinni::String::toCpp(type),
                                       ::djinni::String::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setInt:(nonnull NSString *)type
         value:(int32_t)value {
    try {
        _cppRefHandle.get()->setInt(::djinni::String::toCpp(type),
                                    ::djinni::I32::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFloat:(nonnull NSString *)type
           value:(float)value {
    try {
        _cppRefHandle.get()->setFloat(::djinni::String::toCpp(type),
                                      ::djinni::F32::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setI64:(nonnull NSString *)type
         value:(int64_t)value {
    try {
        _cppRefHandle.get()->setI64(::djinni::String::toCpp(type),
                                    ::djinni::I64::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable GBConfigGen *)getSubConfig:(nonnull NSString *)key {
    try {
        auto r = _cppRefHandle.get()->getSubConfig(::djinni::String::toCpp(key));
        return ::djinni_generated::ConfigGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ConfigGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ConfigGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBConfigGen>(cpp);
}

}  // namespace djinni_generated

@end
