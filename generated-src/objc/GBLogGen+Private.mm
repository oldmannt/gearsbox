// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBLogGen+Private.h"
#import "GBLogGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBLogGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBLogGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::LogGen>&)cppRef;

@end

@implementation GBLogGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::LogGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::LogGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBLogGen *)instance {
    try {
        auto r = ::gearsbox::LogGen::instance();
        return ::djinni_generated::LogGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)init:(int32_t)output
       param:(nonnull NSString *)param {
    try {
        auto r = _cppRefHandle.get()->init_(::djinni::I32::toCpp(output),
                                            ::djinni::String::toCpp(param));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)log:(int32_t)output
        lev:(int32_t)lev
        msg:(nonnull NSString *)msg {
    try {
        _cppRefHandle.get()->log(::djinni::I32::toCpp(output),
                                 ::djinni::I32::toCpp(lev),
                                 ::djinni::String::toCpp(msg));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto LogGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto LogGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBLogGen>(cpp);
}

}  // namespace djinni_generated

@end
