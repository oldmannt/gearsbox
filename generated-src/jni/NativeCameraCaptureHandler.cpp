// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#include "NativeCameraCaptureHandler.hpp"  // my header
#include "Marshal.hpp"
#include "NativeVideoFrameGen.hpp"

namespace djinni_generated {

NativeCameraCaptureHandler::NativeCameraCaptureHandler() : ::djinni::JniInterface<::gearsbox::CameraCaptureHandler, NativeCameraCaptureHandler>("dyno/fun/gearsbox/CameraCaptureHandler$CppProxy") {}

NativeCameraCaptureHandler::~NativeCameraCaptureHandler() = default;

NativeCameraCaptureHandler::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeCameraCaptureHandler::JavaProxy::~JavaProxy() = default;

void NativeCameraCaptureHandler::JavaProxy::captureOutput(const std::shared_ptr<::gearsbox::VideoFrameGen> & c_picture, const std::string & c_error) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraCaptureHandler>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_captureOutput,
                           ::djinni::get(::djinni_generated::NativeVideoFrameGen::fromCpp(jniEnv, c_picture)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_error)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_CameraCaptureHandler_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::CameraCaptureHandler>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_CameraCaptureHandler_00024CppProxy_native_1captureOutput(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_picture, jstring j_error)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::CameraCaptureHandler>(nativeRef);
        ref->captureOutput(::djinni_generated::NativeVideoFrameGen::toCpp(jniEnv, j_picture),
                           ::djinni::String::toCpp(jniEnv, j_error));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
