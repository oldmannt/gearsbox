// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ui.djinni

#import "GBViewGen+Private.h"
#import "GBViewGen.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GBArgbColor+Private.h"
#import "GBViewConstraint+Private.h"
#import "GBViewEventHandler+Private.h"
#import "GBViewFrame+Private.h"
#import "GBViewGen+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class ViewGen::ObjcProxy final
: public ::gearsbox::ViewGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    std::string getId() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getId];
            return ::djinni::String::toCpp(r);
        }
    }
    void setFrame(const ::gearsbox::ViewFrame & c_frame) override
    {
        @autoreleasepool {
            [Handle::get() setFrame:(::djinni_generated::ViewFrame::fromCpp(c_frame))];
        }
    }
    ::gearsbox::ViewFrame getFrame() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getFrame];
            return ::djinni_generated::ViewFrame::toCpp(r);
        }
    }
    void setBackgroundColor(float c_a, float c_r, float c_g, float c_b) override
    {
        @autoreleasepool {
            [Handle::get() setBackgroundColor:(::djinni::F32::fromCpp(c_a))
                                            r:(::djinni::F32::fromCpp(c_r))
                                            g:(::djinni::F32::fromCpp(c_g))
                                            b:(::djinni::F32::fromCpp(c_b))];
        }
    }
    void setVisiable(bool c_v) override
    {
        @autoreleasepool {
            [Handle::get() setVisiable:(::djinni::Bool::fromCpp(c_v))];
        }
    }
    ::gearsbox::ViewType getType() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getType];
            return ::djinni::Enum<::gearsbox::ViewType, GBViewType>::toCpp(r);
        }
    }
    void setBoardColor(const ::gearsbox::ArgbColor & c_color) override
    {
        @autoreleasepool {
            [Handle::get() setBoardColor:(::djinni_generated::ArgbColor::fromCpp(c_color))];
        }
    }
    void setBoardWidth(float c_width) override
    {
        @autoreleasepool {
            [Handle::get() setBoardWidth:(::djinni::F32::fromCpp(c_width))];
        }
    }
    std::shared_ptr<::gearsbox::ViewGen> getSubView(const std::string & c_id) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getSubView:(::djinni::String::fromCpp(c_id))];
            return ::djinni_generated::ViewGen::toCpp(r);
        }
    }
    std::shared_ptr<::gearsbox::ViewGen> addSubView(const std::string & c_id) override
    {
        @autoreleasepool {
            auto r = [Handle::get() addSubView:(::djinni::String::fromCpp(c_id))];
            return ::djinni_generated::ViewGen::toCpp(r);
        }
    }
    bool removeSubView(const std::string & c_id) override
    {
        @autoreleasepool {
            auto r = [Handle::get() removeSubView:(::djinni::String::fromCpp(c_id))];
            return ::djinni::Bool::toCpp(r);
        }
    }
    void removeAllSubView() override
    {
        @autoreleasepool {
            [Handle::get() removeAllSubView];
        }
    }
    void addConstraint(const ::gearsbox::ViewConstraint & c_constraint) override
    {
        @autoreleasepool {
            [Handle::get() addConstraint:(::djinni_generated::ViewConstraint::fromCpp(c_constraint))];
        }
    }
    void setEventHandler(const std::shared_ptr<::gearsbox::ViewEventHandler> & c_handler) override
    {
        @autoreleasepool {
            [Handle::get() setEventHandler:(::djinni_generated::ViewEventHandler::fromCpp(c_handler))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ViewGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ViewGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
