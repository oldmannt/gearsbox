// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativeTaskManagerGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeTaskExcuserGen.hpp"
#include "NativeTaskInfoGen.hpp"
#include "NativeTaskManagerGen.hpp"

namespace djinni_generated {

NativeTaskManagerGen::NativeTaskManagerGen() : ::djinni::JniInterface<::gearsbox::TaskManagerGen, NativeTaskManagerGen>("dyno/fun/gearsbox/TaskManagerGen$CppProxy") {}

NativeTaskManagerGen::~NativeTaskManagerGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::TaskManagerGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gearsbox::TaskManagerGen::instance();
        return ::djinni::release(::djinni_generated::NativeTaskManagerGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_create(JNIEnv* jniEnv, jobject /*this*/, jlong j_taskId, jlong j_delay, jint j_repeated)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gearsbox::TaskManagerGen::create(::djinni::I64::toCpp(jniEnv, j_taskId),
                                                    ::djinni::I64::toCpp(jniEnv, j_delay),
                                                    ::djinni::I32::toCpp(jniEnv, j_repeated));
        return ::djinni::release(::djinni_generated::NativeTaskInfoGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_native_1addTask(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_taskId, jlong j_delay, jlong j_repeated, jobject j_task)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskManagerGen>(nativeRef);
        ref->addTask(::djinni::I64::toCpp(jniEnv, j_taskId),
                     ::djinni::I64::toCpp(jniEnv, j_delay),
                     ::djinni::I64::toCpp(jniEnv, j_repeated),
                     ::djinni_generated::NativeTaskExcuserGen::toCpp(jniEnv, j_task));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_native_1addTaskI(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_taskId, jobject j_task)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskManagerGen>(nativeRef);
        ref->addTaskI(::djinni::I64::toCpp(jniEnv, j_taskId),
                      ::djinni_generated::NativeTaskExcuserGen::toCpp(jniEnv, j_task));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_native_1addTaskInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_task, jobject j_taskExcuser)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskManagerGen>(nativeRef);
        ref->addTaskInfo(::djinni_generated::NativeTaskInfoGen::toCpp(jniEnv, j_task),
                         ::djinni_generated::NativeTaskExcuserGen::toCpp(jniEnv, j_taskExcuser));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_native_1addTaskExcuser(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_task)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskManagerGen>(nativeRef);
        ref->addTaskExcuser(::djinni_generated::NativeTaskExcuserGen::toCpp(jniEnv, j_task));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskManagerGen_00024CppProxy_native_1removeTask(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_taskId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskManagerGen>(nativeRef);
        ref->removeTask(::djinni::I64::toCpp(jniEnv, j_taskId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
