// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBHttpRequestGen+Private.h"
#import "GBHttpRequestGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBCallbackHttpGen+Private.h"
#import "GBHttpRequestGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBHttpRequestGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::HttpRequestGen>&)cppRef;

@end

@implementation GBHttpRequestGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::HttpRequestGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::HttpRequestGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBHttpRequestGen *)create {
    try {
        auto r = ::gearsbox::HttpRequestGen::create();
        return ::djinni_generated::HttpRequestGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)get:(nonnull NSString *)url
      callback:(nullable id<GBCallbackHttpGen>)callback {
    try {
        auto r = _cppRefHandle.get()->get(::djinni::String::toCpp(url),
                                          ::djinni_generated::CallbackHttpGen::toCpp(callback));
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpRequestGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpRequestGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBHttpRequestGen>(cpp);
}

}  // namespace djinni_generated

@end
