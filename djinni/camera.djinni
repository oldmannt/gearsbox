@import "config.djinni"

camera_flash = enum {
	None;
	On;
	Off;
	Auto;
}

camera_quality = enum {
	None;
	P360;
	P480;
	P720;
	P1080;
	P1920;
}

video_frame_gen = interface +o +j {
	getData():i64;
	getWidth():i32;
	getHeight():i32;
	getSize():i64;
	getLineSize():i32;

	setData(data:i64);
	setWidth(width:i32);
	setHeight(height:i32);
	setSize(size:i64);
	setLineSize(linesize:i32);

	getAudioData():i64;
	getAudioDataSize():i64;
	getAudioPSTValue():i64;
	getAudioPSTScale():i32;
	getNumSamples():i32;
	getChannelsPerFrame():i32;
	getSampleRate():f64;
	getBitsPerChannel():i32;

	setAudioData(data:i64);
	setAudioDataSize(size:i64);
	setAudioPSTValue(value:i64);
	setAudioPSTScale(scale:i32);
	setNumSamples(num:i32);
	setChannelsPerFrame(channels:i32);
	setSampleRate(rate:f64);
	setBitsPerChannel(bits:i32);
}

camera_capture_handler = interface +c +o +j {
	captureOutput(picture:video_frame_gen, error:string);
}

camera_exposure_mode = enum {
	None;
	# ios Indicates that the exposure should be locked at its current value.
	Locked;
	# ios Indicates that the device should automatically adjust exposure once and then change the exposure mode to Locked.
	AutoExpose;
	# ios Indicates that the device should automatically adjust exposure when needed.
	ContinuousAutoExposure;
	#ios Indicates that the device should only adjust exposure according to user provided ISO, exposureDuration values.
	ModeCustom;		
}

camera_focus_mode = enum {
	None;
	Locked;
	AutoFocus;
	ContinuousAutoFocus;
}

camera_focus_range = enum {
	None;
	Near;
	Far;
}

camera_config_gen = interface +c {
	const flash_mode:string = "flash_mode";
	const flash_mode_auto:string = "auto";
	const flash_mode_on:string = "on";
	const flash_mode_off:string = "off";
	const quality:string = "quality";
	const quality_360p:string = "360p";
	const quality_480p:string = "480p";
	const quality_720p:string = "720p";
	const quality_1080p:string = "1080p";

	static instance():camera_config_gen;
	initialize(cfg:config_gen):bool;
	getFlashMode():camera_flash;
	getQuatityLevel():camera_quality;
	setFlashMode(mode:camera_flash);
	setQuatityLevel(quality:camera_quality);
}

camera_capture_mode = enum {
	None;
	Immediate_Video;
	Video;
	Photo;
}

camera_controller_gen = interface +o +j {

	initialize(audio:bool);
	setRefreshDuration(value:i64,scale:i32);
	setAudioEnable(enable:bool);
	startCamera();
	stopCamera();
	switchFront(front:bool);
	isFront():bool;
	setFlashMode(mode:camera_flash);
	getFlashMode():camera_flash;
	setQuality(quality:camera_quality);
	getQuality():camera_quality;

	setExposureMode(mode:camera_exposure_mode);
	getExposureMode():camera_exposure_mode;
	setExposurePoint(x:f32, y:f32);
	setExposureEv(ev:f32);
	getExposureEv():f32;
	getExposureMaxEv():f32;
	getExposureMinEv():f32;
	setExposureDuration(seconds:f32);
	getExposureDuration():f32;
	getExposureMinDuration():f32;
	getExposureMaxDuration():f32;
	setISO(iso:i32);
	getISO():i32;
	getISOMax():i32;
	getISOMin():i32;

	setFocusMode(mode:camera_focus_mode);
	getFocusMode():camera_focus_mode;
	# lens form 0.0 to 1.0, shortest to furthest
	setFocusLens(lens:f32);
	getFocusLens():f32;
	getFocusMax():f32;
	getFocusMin():f32;
	setFocusPoint(x:f32, y:f32);
	setFocusAutoRange(range:camera_focus_range);
	getFocusAutoRange():camera_focus_range;

	setZoom(zoom:f32);
	getZoom():f32;
	getZoomMax():f32;
	# minimum value is 1.0
	getZoomMin():f32;

	captureOneFrame():video_frame_gen;
	asnyOneFrame();
	asnyOnePicture();
	setCaptureHandler(handler:camera_capture_handler);
	setCaptureMode(mode:camera_capture_mode);
	getCaptureMode():camera_capture_mode;
	setImmediaPause(flag:bool);
}

video_writer_gen = interface +c {
	static create():video_writer_gen;

	setFilePath(file:string);
	getFilePath():string;
	setFPS(fps:i32);
	getFPS():i32;
	setBitRate(rate:i32);
	setVideoEncoder(encoder:video_encoder_gen);
	encodeFrame(frame:video_frame_gen);
	start(interval:i64);
	pause();
	resume();
	isRunning():bool;
	setInterval(interval:i64);
	saveNRlease();
}

video_encoder_gen = interface +c +j +o {
	initialize(filepath:string, fps:i32, bitrate:i32, width:i32, height:i32, frame:video_frame_gen):bool;
	encodeFrame(frame:video_frame_gen);
	setFps(fps:i32);
	saveNRelease();
}

video_info_gen = interface +c {
	# create at fist time, return after second time
	static getVideoInfo(path:string, out_width:i32, out_height:i32):video_info_gen;
	getName():string;
	getPath():string;
	getFPS():i32;
	getWidth():i32;
	getHeight():i32;
	getFrameAmount():i64;
	#by second
	getDuration():i64; 
	getVideoFrame():video_frame_gen;
}

