// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativeLogGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeLogGen.hpp"

namespace djinni_generated {

NativeLogGen::NativeLogGen() : ::djinni::JniInterface<::gearsbox::LogGen, NativeLogGen>("dyno/fun/gearsbox/LogGen$CppProxy") {}

NativeLogGen::~NativeLogGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_LogGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::LogGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_gearsbox_LogGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::gearsbox::LogGen::instance();
        return ::djinni::release(::djinni_generated::NativeLogGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_gearsbox_LogGen_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_output, jstring j_param)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::LogGen>(nativeRef);
        auto r = ref->initialize(::djinni::I32::toCpp(jniEnv, j_output),
                                 ::djinni::String::toCpp(jniEnv, j_param));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_LogGen_00024CppProxy_native_1log(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_output, jint j_lev, jstring j_msg)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::LogGen>(nativeRef);
        ref->log(::djinni::I32::toCpp(jniEnv, j_output),
                 ::djinni::I32::toCpp(jniEnv, j_lev),
                 ::djinni::String::toCpp(jniEnv, j_msg));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_LogGen_00024CppProxy_native_1logerrf(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_msg)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::LogGen>(nativeRef);
        ref->logerrf(::djinni::String::toCpp(jniEnv, j_msg));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_LogGen_00024CppProxy_native_1loginfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_msg)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::LogGen>(nativeRef);
        ref->loginfo(::djinni::String::toCpp(jniEnv, j_msg));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
