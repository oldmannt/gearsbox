
@import "ui.djinni"
@import "camera.djinni"
@import "config.djinni"

instance_getter_gen = interface +c {
    static getCameraController():camera_controller_gen;
    static setCameraController(camera:camera_controller_gen);

    static getPlatformUtility():platform_utility_gen;
    static setPlatformUtility(mgr:platform_utility_gen);

    static getConfig(id:string):config_gen;
}

callback_http_gen = interface +j +o{
    callback(id:i64, result:bool, data:string): bool;
}

http_request_gen = interface +c {
    static create(): http_request_gen;
    get(url:string, callback:callback_http_gen):i64;
}

log_gen = interface +c {
    const LOG_CONSOLE:i32 = 1;
    const LOG_FILE:i32 = 2;
    const LOG_NET:i32 = 4;
    const LOG_VERBOSE:i32=1;
    const LOG_DEBUG:i32=2;
    const LOG_INFO:i32=3;
    const LOG_WARN:i32=4;
    const LOG_ERROR:i32=5;
    const LOG_FATAL:i32=6;
    static instance(): log_gen;
    initialize(output:i32,param:string): bool;
    log(output:i32, lev:i32, msg:string);
    logerrf(msg:string);
    loginfo(msg:string);
}

async_loop_gen = interface +c {
    static instance(): async_loop_gen;
    process(elapse:i64);
}

crash_handler_gen = interface +c +o{
    header(path:string, url:string);
}

breakpad_gen = interface +c +o {
    start();
    stop();
    setUploadUrl();
    setHandler(hander:crash_handler_gen);
}

file_info_gen = interface +o +j {
    initialize(path:string):bool;
    getSize():i64;
    getCreateDate():date;
    getName():string;
    getSuffix():string;
    getPrefix():string;
    getPath():string;
}

platform_utility_gen = interface +o +j {
    getSystemTickNano():i64;
    getSystemTickMsec():i64;
    getSystemTickSec():f64;
    endEniting(force:bool);

    getLanguage():lang_type;

    #ios home directory
    getHomeDirectory():string; 
    getPackFilePath(file:string):string;
    getPackFileBuffer(file:string):string; 
    #copy pack file to home directory and return path in home directory
    getPackFileToHomePath(file:string):string;
    getFilesFromPathBySuffix(path:string, suffix:string):set<string>;
    getSubDirInHome(sub_dir:string):string;
    getFileNameFromPath(path:string):string;
    getFileInfo(path_name:string):file_info_gen;
    fileExists(path_name:string):bool;
    deleteFile(fullpath:string):bool;

    isVideoFileCompatibleToSavedPhotosAlbum(fullpath:string):bool;
    saveVideoFileToSavedPhotosAlbum(fullpath:string):bool;

    playVideo(file:string);
    alertDialog(tittle:string, msg:string);
    showLoadingView(show:bool);

    createVideoFrame():video_frame_gen;
}

lang_type = enum{
    LANG_NONE;
    LANG_CHS;
    LANG_ENG;
}

language_store_gen = interface +c {
    static instance():language_store_gen;
    initialize(param:string):bool;
    setLanguage(lang:lang_type);
    getLanguage():lang_type;
    getString(type:string):string;
}

task_info_gen = interface +c +j +o {
    getTaskId():i64;
    getDelay():i64;
    getRepeated():i32;
    getAssignTick():i64;
    getData():string;
    getValue(key:string):string;
    getIValue(key:string):i64;
    getFValue(key:string):f64;

    setTaskId(id:i64);
    setDelay(delay:i64);
    setRepeated(repeated:i32);
    setAssignTick(assign:i64);
    setData(data:string);
    setValue(key:string,value:string);
    setIValue(key:string,value:i64);
    setFValue(key:string,value:f64);
}

#delay<0 immediately
#delay==0 next frame
task_manager_gen = interface +c {
    static instance():task_manager_gen;
    static create_info(task_id:i64, delay:i64, repeated:i32):task_info_gen;
    #delay<0 excuse immidiately, delay==0 next frame, repeaed <=0 not reapead
    addTask(task_id:i64, delay:i64, repeated:i64, task:task_excuser_gen);
    addTaskI(task_id:i64, task:task_excuser_gen);
    addTaskInfo(task:task_info_gen, task_excuser:task_excuser_gen);
    addTaskExcuser(task:task_excuser_gen);
    removeTask(task_id:i64);
}

task_excuser_gen = interface +o +j +c {
    excuse(info:task_info_gen);
}

timer_gen = interface +c {
    #repeat_times<0 means forever
    static create(interval:i64, repeat_times:i32, hander:task_excuser_gen):timer_gen;
    static currentTick():i64;
    start():bool;
    stop();
    pause();
    resume();
    setInterval(interval:i64);
    getInterval():i64;
    getRepeated():i32;
    getTimePassed():i64;
    isRunning():bool;
}
