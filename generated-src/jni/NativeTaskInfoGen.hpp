// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#pragma once

#include "djinni_support.hpp"
#include "task_info_gen.hpp"

namespace djinni_generated {

class NativeTaskInfoGen final : ::djinni::JniInterface<::gearsbox::TaskInfoGen, NativeTaskInfoGen> {
public:
    using CppType = std::shared_ptr<::gearsbox::TaskInfoGen>;
    using CppOptType = std::shared_ptr<::gearsbox::TaskInfoGen>;
    using JniType = jobject;

    using Boxed = NativeTaskInfoGen;

    ~NativeTaskInfoGen();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTaskInfoGen>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTaskInfoGen>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTaskInfoGen();
    friend ::djinni::JniClass<NativeTaskInfoGen>;
    friend ::djinni::JniInterface<::gearsbox::TaskInfoGen, NativeTaskInfoGen>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::gearsbox::TaskInfoGen
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        int64_t getTaskId() override;
        int64_t getDelay() override;
        int32_t getRepeated() override;
        int64_t getAssignTick() override;
        std::string getData() override;
        std::string getValue(const std::string & key) override;
        int64_t getIValue(const std::string & key) override;
        double getFValue(const std::string & key) override;
        void setTaskId(int64_t id) override;
        void setDelay(int64_t delay) override;
        void setRepeated(int32_t repeated) override;
        void setAssignTick(int64_t assign) override;
        void setData(const std::string & data) override;
        void setValue(const std::string & key, const std::string & value) override;
        void setIValue(const std::string & key, int64_t value) override;
        void setFValue(const std::string & key, double value) override;

    private:
        friend ::djinni::JniInterface<::gearsbox::TaskInfoGen, ::djinni_generated::NativeTaskInfoGen>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/gearsbox/TaskInfoGen") };
    const jmethodID method_getTaskId { ::djinni::jniGetMethodID(clazz.get(), "getTaskId", "()J") };
    const jmethodID method_getDelay { ::djinni::jniGetMethodID(clazz.get(), "getDelay", "()J") };
    const jmethodID method_getRepeated { ::djinni::jniGetMethodID(clazz.get(), "getRepeated", "()I") };
    const jmethodID method_getAssignTick { ::djinni::jniGetMethodID(clazz.get(), "getAssignTick", "()J") };
    const jmethodID method_getData { ::djinni::jniGetMethodID(clazz.get(), "getData", "()Ljava/lang/String;") };
    const jmethodID method_getValue { ::djinni::jniGetMethodID(clazz.get(), "getValue", "(Ljava/lang/String;)Ljava/lang/String;") };
    const jmethodID method_getIValue { ::djinni::jniGetMethodID(clazz.get(), "getIValue", "(Ljava/lang/String;)J") };
    const jmethodID method_getFValue { ::djinni::jniGetMethodID(clazz.get(), "getFValue", "(Ljava/lang/String;)D") };
    const jmethodID method_setTaskId { ::djinni::jniGetMethodID(clazz.get(), "setTaskId", "(J)V") };
    const jmethodID method_setDelay { ::djinni::jniGetMethodID(clazz.get(), "setDelay", "(J)V") };
    const jmethodID method_setRepeated { ::djinni::jniGetMethodID(clazz.get(), "setRepeated", "(I)V") };
    const jmethodID method_setAssignTick { ::djinni::jniGetMethodID(clazz.get(), "setAssignTick", "(J)V") };
    const jmethodID method_setData { ::djinni::jniGetMethodID(clazz.get(), "setData", "(Ljava/lang/String;)V") };
    const jmethodID method_setValue { ::djinni::jniGetMethodID(clazz.get(), "setValue", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_setIValue { ::djinni::jniGetMethodID(clazz.get(), "setIValue", "(Ljava/lang/String;J)V") };
    const jmethodID method_setFValue { ::djinni::jniGetMethodID(clazz.get(), "setFValue", "(Ljava/lang/String;D)V") };
};

}  // namespace djinni_generated
