// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#import "GBVideoInfoGen+Private.h"
#import "GBVideoInfoGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "GBVideoFrameGen+Private.h"
#import "GBVideoInfoGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBVideoInfoGen ()

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoInfoGen>&)cppRef;

@end

@implementation GBVideoInfoGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::VideoInfoGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::VideoInfoGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GBVideoInfoGen *)getVideoInfo:(nonnull NSString *)path
                                 outWidth:(int32_t)outWidth
                                outHeight:(int32_t)outHeight {
    try {
        auto r = ::gearsbox::VideoInfoGen::getVideoInfo(::djinni::String::toCpp(path),
                                                        ::djinni::I32::toCpp(outWidth),
                                                        ::djinni::I32::toCpp(outHeight));
        return ::djinni_generated::VideoInfoGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getName {
    try {
        auto r = _cppRefHandle.get()->getName();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getPath {
    try {
        auto r = _cppRefHandle.get()->getPath();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getFPS {
    try {
        auto r = _cppRefHandle.get()->getFPS();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getWidth {
    try {
        auto r = _cppRefHandle.get()->getWidth();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getHeight {
    try {
        auto r = _cppRefHandle.get()->getHeight();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getFrameAmount {
    try {
        auto r = _cppRefHandle.get()->getFrameAmount();
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getDuration {
    try {
        auto r = _cppRefHandle.get()->getDuration();
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GBVideoFrameGen>)getVideoFrame {
    try {
        auto r = _cppRefHandle.get()->getVideoFrame();
        return ::djinni_generated::VideoFrameGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VideoInfoGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VideoInfoGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GBVideoInfoGen>(cpp);
}

}  // namespace djinni_generated

@end
