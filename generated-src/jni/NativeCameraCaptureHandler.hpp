// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from camera.djinni

#pragma once

#include "camera_capture_handler.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCameraCaptureHandler final : ::djinni::JniInterface<::gearsbox::CameraCaptureHandler, NativeCameraCaptureHandler> {
public:
    using CppType = std::shared_ptr<::gearsbox::CameraCaptureHandler>;
    using CppOptType = std::shared_ptr<::gearsbox::CameraCaptureHandler>;
    using JniType = jobject;

    using Boxed = NativeCameraCaptureHandler;

    ~NativeCameraCaptureHandler();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCameraCaptureHandler>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCameraCaptureHandler>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCameraCaptureHandler();
    friend ::djinni::JniClass<NativeCameraCaptureHandler>;
    friend ::djinni::JniInterface<::gearsbox::CameraCaptureHandler, NativeCameraCaptureHandler>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::gearsbox::CameraCaptureHandler
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void captureOutput(const std::shared_ptr<::gearsbox::VideoFrameGen> & picture, const std::string & error) override;

    private:
        friend ::djinni::JniInterface<::gearsbox::CameraCaptureHandler, ::djinni_generated::NativeCameraCaptureHandler>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/gearsbox/CameraCaptureHandler") };
    const jmethodID method_captureOutput { ::djinni::jniGetMethodID(clazz.get(), "captureOutput", "(Ldyno/fun/gearsbox/VideoFrameGen;Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
