argb_color = record{
	const noColor:argb_color = {a=0,r=0,g=0,b=0};
	const redColor:argb_color = {a=1,r=1,g=0,b=0};
	const greenColor:argb_color = {a=1,r=0,g=1,b=0};
	const blueColor:argb_color = {a=1,r=0,g=0,b=1};
	const blackColor:argb_color = {a=1,r=0,g=0,b=0};
	const whiteColor:argb_color = {a=1,r=1,g=1,b=1};
	a:f32;
	r:f32;
	g:f32;
	b:f32;
}

view_frame = record{
	x:f32;
	y:f32;
	w:f32;
	h:f32;
}

constraint_type = enum {
	None;		
	Leading;	
	Trailing;	
	Top;		
	Bottom;		
	Width;		
	Height;		
	CenterX;	
	CenterY;	
}

view_type = enum {
	base;
	label;
	input;
	btn;
}

view_constraint = record +c{
	const self:string = "self";
	type:constraint_type;
	type_to:constraint_type;
	view_from:string;
	view_to:string;
	multiplier:f32;
	offset:f32;
}

text_boarder = enum{
	None;
	Line;
	Bezel;
	RoundedRect;
}

text_align = enum {
	None;
	Left;
	Center;
	Right;
}

text_keyboard = enum {
	Default;
	ASCII;
	URL;
	NumberPad;
	PhonePad;
	DecimalPad;
}

view_conf = record +c {
	const noframe:view_frame = {x=-1,y=-1,w=-1,h=-1};
	const nogbcolor:argb_color = {a=-1,r=0,g=0,b=0};
	id:string;
	type:view_type;
	frame:view_frame;

	bgcolor:argb_color;
	fontsize:i32;
	textalign:text_align;
	textboarder:text_boarder;
	text:string;
	numericText:bool;
	keyboardtype:text_keyboard;
	maxlength:i32;

	constraints:list<view_constraint>;
	subviews:list<view_conf>;
}

ui_conf_gen = interface +c {
	static instance():ui_conf_gen;
	initialize(cfg:string):bool;
	load(cfg:string):bool;
	const getConstraints(name:string):list<view_constraint>;
	const getViewConf(nmae:string):view_conf;
}

view_event = enum {
	None;
	Tap;
	TextChange;
}

view_event_param = record{
	x:f32;
	y:f32;
	type:view_event;
	text:string;
}

view_event_handler = interface +c {
	handle(param:view_event_param,view:view_gen):bool;
}

view_gen = interface +j +o {
	const NUMBER_INT:i32 = 1;
	const NUMBER_FLOAT:i32 = 2;
	const NUMBER_POSITIVE:i32 = 4;
	const NUMBER_NEGATIVE:i32 = 8;
	getId():string;
	setFrame(frame:view_frame);
	getFrame():view_frame;
	setBackgroundColor(a:f32,r:f32,g:f32,b:f32);
	setVisiable(v:bool);
	becomeFirstResponder();
	getType():view_type;
	setBoard(width:f32, color:argb_color);
	setText(text:string);
	getText():string;
	setTextColor(color:argb_color);
	setFontSize(size:i32);
	setNumbernic(type:i32);
	setMaxTextLen(length:i32);

	getSubView(id:string):view_gen;
	addSubViewById(id:string,type:view_type):view_gen;
	addSubView(conf:view_conf):view_gen;
	removeSubView(id:string):bool;
	removeAllSubView();
	addConstraint(constraint:view_constraint);

	setEventHandler(event:view_event,handler:view_event_handler);
}

view_factory_gen = interface +j +o{
	createView(conf:view_conf):view_gen;
	createViewById(id:string, type:view_type):view_gen;
	injectView(view:view_gen):bool;
}

ui_manager_gen = interface +c{
	static instance():ui_manager_gen;
	initialize(param:string, factory:view_factory_gen):bool;
	inject(view:view_gen);
	getView(id:string):view_gen;
	addView(view:view_gen):bool;
	removeView(id:string);
}

typer_convertor_dummy = interface +j +o {
	convertUIColor(color:argb_color);
	convertUIRect(rect:view_frame);
	convertUIConstraintType(type:constraint_type);
	convertUITextBoarder(type:text_boarder);
	convertUITextAlign(type:text_align);
	convertKeyboardType(type:text_keyboard);
}

ui_value_checker_gen = interface +c {
	static instance():ui_value_checker_gen;
	isValidColor(value:argb_color):bool;
	isValidFrame(value:view_frame):bool;
	isValidTextBoarder(value:text_boarder):bool;
	isValidTextAlign(value:text_align):bool;
}
