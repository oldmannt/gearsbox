// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#import "GBTaskInfoGen+Private.h"
#import "GBTaskInfoGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GBTaskInfoGenCppProxy : NSObject<GBTaskInfoGen>

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::TaskInfoGen>&)cppRef;

@end

@implementation GBTaskInfoGenCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::gearsbox::TaskInfoGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::gearsbox::TaskInfoGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int64_t)getTaskId {
    try {
        auto r = _cppRefHandle.get()->getTaskId();
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getDelay {
    try {
        auto r = _cppRefHandle.get()->getDelay();
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getRepeated {
    try {
        auto r = _cppRefHandle.get()->getRepeated();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getAssignTick {
    try {
        auto r = _cppRefHandle.get()->getAssignTick();
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getData {
    try {
        auto r = _cppRefHandle.get()->getData();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getValue:(nonnull NSString *)key {
    try {
        auto r = _cppRefHandle.get()->getValue(::djinni::String::toCpp(key));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getIValue:(nonnull NSString *)key {
    try {
        auto r = _cppRefHandle.get()->getIValue(::djinni::String::toCpp(key));
        return ::djinni::I64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)getFValue:(nonnull NSString *)key {
    try {
        auto r = _cppRefHandle.get()->getFValue(::djinni::String::toCpp(key));
        return ::djinni::F64::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setTaskId:(int64_t)id {
    try {
        _cppRefHandle.get()->setTaskId(::djinni::I64::toCpp(id));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDelay:(int64_t)delay {
    try {
        _cppRefHandle.get()->setDelay(::djinni::I64::toCpp(delay));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRepeated:(int32_t)repeated {
    try {
        _cppRefHandle.get()->setRepeated(::djinni::I32::toCpp(repeated));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAssignTick:(int64_t)assign {
    try {
        _cppRefHandle.get()->setAssignTick(::djinni::I64::toCpp(assign));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setData:(nonnull NSString *)data {
    try {
        _cppRefHandle.get()->setData(::djinni::String::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setValue:(nonnull NSString *)key
           value:(nonnull NSString *)value {
    try {
        _cppRefHandle.get()->setValue(::djinni::String::toCpp(key),
                                      ::djinni::String::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setIValue:(nonnull NSString *)key
            value:(int64_t)value {
    try {
        _cppRefHandle.get()->setIValue(::djinni::String::toCpp(key),
                                       ::djinni::I64::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFValue:(nonnull NSString *)key
            value:(double)value {
    try {
        _cppRefHandle.get()->setFValue(::djinni::String::toCpp(key),
                                       ::djinni::F64::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class TaskInfoGen::ObjcProxy final
: public ::gearsbox::TaskInfoGen
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    int64_t getTaskId() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getTaskId];
            return ::djinni::I64::toCpp(r);
        }
    }
    int64_t getDelay() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getDelay];
            return ::djinni::I64::toCpp(r);
        }
    }
    int32_t getRepeated() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getRepeated];
            return ::djinni::I32::toCpp(r);
        }
    }
    int64_t getAssignTick() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getAssignTick];
            return ::djinni::I64::toCpp(r);
        }
    }
    std::string getData() override
    {
        @autoreleasepool {
            auto r = [Handle::get() getData];
            return ::djinni::String::toCpp(r);
        }
    }
    std::string getValue(const std::string & c_key) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getValue:(::djinni::String::fromCpp(c_key))];
            return ::djinni::String::toCpp(r);
        }
    }
    int64_t getIValue(const std::string & c_key) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getIValue:(::djinni::String::fromCpp(c_key))];
            return ::djinni::I64::toCpp(r);
        }
    }
    double getFValue(const std::string & c_key) override
    {
        @autoreleasepool {
            auto r = [Handle::get() getFValue:(::djinni::String::fromCpp(c_key))];
            return ::djinni::F64::toCpp(r);
        }
    }
    void setTaskId(int64_t c_id) override
    {
        @autoreleasepool {
            [Handle::get() setTaskId:(::djinni::I64::fromCpp(c_id))];
        }
    }
    void setDelay(int64_t c_delay) override
    {
        @autoreleasepool {
            [Handle::get() setDelay:(::djinni::I64::fromCpp(c_delay))];
        }
    }
    void setRepeated(int32_t c_repeated) override
    {
        @autoreleasepool {
            [Handle::get() setRepeated:(::djinni::I32::fromCpp(c_repeated))];
        }
    }
    void setAssignTick(int64_t c_assign) override
    {
        @autoreleasepool {
            [Handle::get() setAssignTick:(::djinni::I64::fromCpp(c_assign))];
        }
    }
    void setData(const std::string & c_data) override
    {
        @autoreleasepool {
            [Handle::get() setData:(::djinni::String::fromCpp(c_data))];
        }
    }
    void setValue(const std::string & c_key, const std::string & c_value) override
    {
        @autoreleasepool {
            [Handle::get() setValue:(::djinni::String::fromCpp(c_key))
                              value:(::djinni::String::fromCpp(c_value))];
        }
    }
    void setIValue(const std::string & c_key, int64_t c_value) override
    {
        @autoreleasepool {
            [Handle::get() setIValue:(::djinni::String::fromCpp(c_key))
                               value:(::djinni::I64::fromCpp(c_value))];
        }
    }
    void setFValue(const std::string & c_key, double c_value) override
    {
        @autoreleasepool {
            [Handle::get() setFValue:(::djinni::String::fromCpp(c_key))
                               value:(::djinni::F64::fromCpp(c_value))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto TaskInfoGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GBTaskInfoGenCppProxy class]]) {
        return ((GBTaskInfoGenCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TaskInfoGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->Handle::get();
    }
    return ::djinni::get_cpp_proxy<GBTaskInfoGenCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
