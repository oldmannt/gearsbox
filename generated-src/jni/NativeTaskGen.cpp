// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

#include "NativeTaskGen.hpp"  // my header
#include "NativeTaskInfo.hpp"

namespace djinni_generated {

NativeTaskGen::NativeTaskGen() : ::djinni::JniInterface<::gearsbox::TaskGen, NativeTaskGen>("dyno/fun/gearsbox/TaskGen$CppProxy") {}

NativeTaskGen::~NativeTaskGen() = default;

NativeTaskGen::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeTaskGen::JavaProxy::~JavaProxy() = default;

void NativeTaskGen::JavaProxy::excuse(const ::gearsbox::TaskInfo & c_info) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskGen>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_excuse,
                           ::djinni::get(::djinni_generated::NativeTaskInfo::fromCpp(jniEnv, c_info)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::gearsbox::TaskGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_gearsbox_TaskGen_00024CppProxy_native_1excuse(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::gearsbox::TaskGen>(nativeRef);
        ref->excuse(::djinni_generated::NativeTaskInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
