// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from gearsbox.djinni

package dyno.fun.gearsbox;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TaskInfoGen {
    public abstract long getTaskId();

    public abstract long getDelay();

    public abstract int getRepeated();

    public abstract long getAssignTick();

    public abstract String getData();

    public abstract String getValue(String key);

    public abstract long getIValue(String key);

    public abstract double getFValue(String key);

    public abstract void setTaskId(long id);

    public abstract void setDelay(long delay);

    public abstract void setRepeated(int repeated);

    public abstract void setAssignTick(long assign);

    public abstract void setData(String data);

    public abstract void setValue(String key, String value);

    public abstract void setIValue(String key, long value);

    public abstract void setFValue(String key, double value);

    private static final class CppProxy extends TaskInfoGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public long getTaskId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTaskId(this.nativeRef);
        }
        private native long native_getTaskId(long _nativeRef);

        @Override
        public long getDelay()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDelay(this.nativeRef);
        }
        private native long native_getDelay(long _nativeRef);

        @Override
        public int getRepeated()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRepeated(this.nativeRef);
        }
        private native int native_getRepeated(long _nativeRef);

        @Override
        public long getAssignTick()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAssignTick(this.nativeRef);
        }
        private native long native_getAssignTick(long _nativeRef);

        @Override
        public String getData()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getData(this.nativeRef);
        }
        private native String native_getData(long _nativeRef);

        @Override
        public String getValue(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getValue(this.nativeRef, key);
        }
        private native String native_getValue(long _nativeRef, String key);

        @Override
        public long getIValue(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getIValue(this.nativeRef, key);
        }
        private native long native_getIValue(long _nativeRef, String key);

        @Override
        public double getFValue(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFValue(this.nativeRef, key);
        }
        private native double native_getFValue(long _nativeRef, String key);

        @Override
        public void setTaskId(long id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTaskId(this.nativeRef, id);
        }
        private native void native_setTaskId(long _nativeRef, long id);

        @Override
        public void setDelay(long delay)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDelay(this.nativeRef, delay);
        }
        private native void native_setDelay(long _nativeRef, long delay);

        @Override
        public void setRepeated(int repeated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRepeated(this.nativeRef, repeated);
        }
        private native void native_setRepeated(long _nativeRef, int repeated);

        @Override
        public void setAssignTick(long assign)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAssignTick(this.nativeRef, assign);
        }
        private native void native_setAssignTick(long _nativeRef, long assign);

        @Override
        public void setData(String data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setData(this.nativeRef, data);
        }
        private native void native_setData(long _nativeRef, String data);

        @Override
        public void setValue(String key, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setValue(this.nativeRef, key, value);
        }
        private native void native_setValue(long _nativeRef, String key, String value);

        @Override
        public void setIValue(String key, long value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setIValue(this.nativeRef, key, value);
        }
        private native void native_setIValue(long _nativeRef, String key, long value);

        @Override
        public void setFValue(String key, double value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFValue(this.nativeRef, key, value);
        }
        private native void native_setFValue(long _nativeRef, String key, double value);
    }
}
