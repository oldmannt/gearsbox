
@import "ui.djinni"
@import "camera.djinni"

instance_getter_gen = interface +c {
    static getCameraController():camera_controller_gen;
    static setCameraController(camera:camera_controller_gen);

    static getPlatformUtility():platform_utility_gen;
    static setPlatformUtility(mgr:platform_utility_gen);
}

callback_http_gen = interface +j +o{
    callback(id:i64, result:bool, data:string): bool;
}

http_request_gen = interface +c {
    static create(): http_request_gen;
    get(url:string, callback:callback_http_gen):i64;
}

log_gen = interface +c {
    const LOG_CONSOLE:i32 = 1;
    const LOG_FILE:i32 = 2;
    const LOG_NET:i32 = 4;
    const LOG_VERBOSE:i32=1;
    const LOG_DEBUG:i32=2;
    const LOG_INFO:i32=3;
    const LOG_WARN:i32=4;
    const LOG_ERROR:i32=5;
    const LOG_FATAL:i32=6;
    static instance(): log_gen;
    initialize(output:i32,param:string): bool;
    log(output:i32, lev:i32, msg:string);
    logerrf(msg:string);
    loginfo(msg:string);
}

async_loop_gen = interface +c {
    static instance(): async_loop_gen;
    process(elapse:i64);
}

crash_handler_gen = interface +c +o{
    header(path:string, url:string);
}

breakpad_gen = interface +c +o {
    start();
    stop();
    setUploadUrl();
    setHandler(hander:crash_handler_gen);
}

platform_utility_gen = interface +o +j {
    endEniting(force:bool);
    getRootDirectory():string;
    getPackFilePath(file:string):string;
}

config_gen = interface +c {
    static create():config_gen;
    initialize(param:string):bool;

    getString(type:string):string;
    getInt(type:string):i32;
    getFloat(type:string):f32;
    getI64(type:string):i64;

    setString(type:string, value:string);
    setInt(type:string, value:i32);
    setFloat(type:string, value:f32);
    setI64(type:string, value:i64);
}

user_config_gen = interface +c {
    static instance():config_gen;
}

lang_type = enum{
    LANG_NONE;
    LANG_CHS;
    LANG_ENG;
}

language_store_gen = interface +c {
    static instance():language_store_gen;
    initialize(param:string):bool;
    setLanguage(lang:lang_type);
    getLanguage():lang_type;
    getString(type:string):string;
}

task_info = record {
    tarsk_id:i32;
    delay:i64;
    repeated:i32;
    elapsed:i64;
}

#delay<0 immediately
#delay==0 next frame
task_manager_gen = interface +c {
    static instance():task_manager_gen;
    addTask(task_id:i32, delay:i64, repeated:i64, task:task_excuser_gen);
    addTaskInfo(task:task_info, task_excuser:task_excuser_gen);
    addTaskExcuser(task:task_excuser_gen);
}

task_excuser_gen = interface +o +j +c {
    excuse(info:task_info);
}

timer_gen = interface +c {
    static create(timeout:i64, repeat_times:i32, hander:task_excuser_gen):timer_gen;
    start():bool;
    stop();
    getRepeated():i32;
    getTimePassed():i64;
    isRunning():bool;
}
